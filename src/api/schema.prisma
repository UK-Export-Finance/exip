// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model ReferenceNumber {
  id            Int          @id @default(autoincrement())
  application   Application? @relation("ReferenceNumber_application", fields: [applicationId], references: [id])
  applicationId String?      @map("application")

  @@index([applicationId])
}

model Application {
  id                                   String                @id @default(cuid())
  createdAt                            DateTime?
  updatedAt                            DateTime?
  eligibility                          Eligibility?          @relation("Application_eligibility", fields: [eligibilityId], references: [id])
  eligibilityId                        String?               @map("eligibility")
  referenceNumber                      Int?
  submissionCount                      Int
  submissionDate                       DateTime?
  submissionDeadline                   DateTime?
  submissionType                       String?
  status                               String                @default("")
  previousStatus                       String                @default("")
  policy                               Policy?               @relation("Application_policy", fields: [policyId], references: [id])
  policyId                             String?               @map("policy")
  exportContract                       ExportContract?       @relation("Application_exportContract", fields: [exportContractId], references: [id])
  exportContractId                     String?               @map("exportContract")
  owner                                Account?              @relation("Application_owner", fields: [ownerId], references: [id])
  ownerId                              String?               @map("owner")
  business                             Business?             @relation("Application_business", fields: [businessId], references: [id])
  businessId                           String?               @map("business")
  broker                               Broker?               @relation("Application_broker", fields: [brokerId], references: [id])
  brokerId                             String?               @map("broker")
  buyer                                Buyer?                @relation("Application_buyer", fields: [buyerId], references: [id])
  buyerId                              String?               @map("buyer")
  company                              Company?              @relation("Application_company", fields: [companyId], references: [id])
  companyId                            String?               @map("company")
  declaration                          Declaration?          @relation("Application_declaration", fields: [declarationId], references: [id])
  declarationId                        String?               @map("declaration")
  nominatedLossPayee                   NominatedLossPayee?   @relation("Application_nominatedLossPayee", fields: [nominatedLossPayeeId], references: [id])
  nominatedLossPayeeId                 String?               @map("nominatedLossPayee")
  policyContact                        PolicyContact?        @relation("Application_policyContact", fields: [policyContactId], references: [id])
  policyContactId                      String?               @map("policyContact")
  sectionReview                        SectionReview?        @relation("Application_sectionReview", fields: [sectionReviewId], references: [id])
  sectionReviewId                      String?               @map("sectionReview")
  version                              String                @default("")
  dealType                             String                @default("") @mysql.VarChar(4)
  migratedV1toV2                       Boolean?
  from_ReferenceNumber_application     ReferenceNumber[]     @relation("ReferenceNumber_application")
  from_NominatedLossPayee_application  NominatedLossPayee[]  @relation("NominatedLossPayee_application")
  from_Policy_application              Policy[]              @relation("Policy_application")
  from_PolicyContact_application       PolicyContact[]       @relation("PolicyContact_application")
  from_ExportContract_application      ExportContract[]      @relation("ExportContract_application")
  from_Account_applications            Account[]             @relation("Account_applications")
  from_Business_application            Business[]            @relation("Business_application")
  from_Broker_application              Broker[]              @relation("Broker_application")
  from_Company_application             Company[]             @relation("Company_application")
  from_Buyer_application               Buyer[]               @relation("Buyer_application")
  from_BuyerContact_application        BuyerContact[]        @relation("BuyerContact_application")
  from_BuyerRelationship_application   BuyerRelationship[]   @relation("BuyerRelationship_application")
  from_BuyerTradingHistory_application BuyerTradingHistory[] @relation("BuyerTradingHistory_application")
  from_Eligibility_application         Eligibility[]         @relation("Eligibility_application")
  from_SectionReview_application       SectionReview[]       @relation("SectionReview_application")
  from_Declaration_application         Declaration[]         @relation("Declaration_application")

  @@index([eligibilityId])
  @@index([referenceNumber])
  @@index([policyId])
  @@index([exportContractId])
  @@index([ownerId])
  @@index([businessId])
  @@index([brokerId])
  @@index([buyerId])
  @@index([companyId])
  @@index([declarationId])
  @@index([nominatedLossPayeeId])
  @@index([policyContactId])
  @@index([sectionReviewId])
}

model TotalContractValue {
  id                                  String        @id @default(cuid())
  valueId                             Int?
  value                               String        @default("") @mysql.VarChar(70)
  from_Eligibility_totalContractValue Eligibility[] @relation("Eligibility_totalContractValue")
}

model CoverPeriod {
  id                           String        @id @default(cuid())
  valueId                      Int?
  value                        String        @default("") @mysql.VarChar(70)
  from_Eligibility_coverPeriod Eligibility[] @relation("Eligibility_coverPeriod")
}

model LossPayeeFinancialInternational {
  id           String                                 @id @default(cuid())
  lossPayee    NominatedLossPayee?                    @relation("LossPayeeFinancialInternational_lossPayee", fields: [lossPayeeId], references: [id])
  lossPayeeId  String?                                @unique @map("lossPayee")
  vector       LossPayeeFinancialInternationalVector? @relation("LossPayeeFinancialInternational_vector", fields: [vectorId], references: [id])
  vectorId     String?                                @unique @map("vector")
  bankAddress  String                                 @default("") @mysql.VarChar(500)
  bicSwiftCode String                                 @default("")
  iban         String                                 @default("")
}

model LossPayeeFinancialInternationalVector {
  id                     String                           @id @default(cuid())
  financialInternational LossPayeeFinancialInternational? @relation("LossPayeeFinancialInternational_vector")
  bicSwiftCodeVector     String                           @default("")
  ibanVector             String                           @default("")
}

model LossPayeeFinancialUk {
  id            String                      @id @default(cuid())
  lossPayee     NominatedLossPayee?         @relation("LossPayeeFinancialUk_lossPayee", fields: [lossPayeeId], references: [id])
  lossPayeeId   String?                     @unique @map("lossPayee")
  vector        LossPayeeFinancialUkVector? @relation("LossPayeeFinancialUk_vector", fields: [vectorId], references: [id])
  vectorId      String?                     @unique @map("vector")
  accountNumber String                      @default("")
  bankAddress   String                      @default("") @mysql.VarChar(500)
  sortCode      String                      @default("")
}

model LossPayeeFinancialUkVector {
  id                  String                @id @default(cuid())
  financialUk         LossPayeeFinancialUk? @relation("LossPayeeFinancialUk_vector")
  accountNumberVector String                @default("")
  sortCodeVector      String                @default("")
}

model NominatedLossPayee {
  id                                  String                           @id @default(cuid())
  application                         Application?                     @relation("NominatedLossPayee_application", fields: [applicationId], references: [id])
  applicationId                       String?                          @map("application")
  financialUk                         LossPayeeFinancialUk?            @relation("LossPayeeFinancialUk_lossPayee")
  financialInternational              LossPayeeFinancialInternational? @relation("LossPayeeFinancialInternational_lossPayee")
  isAppointed                         Boolean?
  isLocatedInUk                       Boolean?
  isLocatedInternationally            Boolean?
  name                                String                           @default("") @mysql.VarChar(200)
  from_Application_nominatedLossPayee Application[]                    @relation("Application_nominatedLossPayee")

  @@index([applicationId])
}

model Policy {
  id                       String               @id @default(cuid())
  application              Application?         @relation("Policy_application", fields: [applicationId], references: [id])
  applicationId            String?              @map("application")
  jointlyInsuredParty      JointlyInsuredParty? @relation("JointlyInsuredParty_policy")
  needPreCreditPeriodCover Boolean?
  policyType               String?
  requestedStartDate       DateTime?
  contractCompletionDate   DateTime?
  totalValueOfContract     Int?
  creditPeriodWithBuyer    String               @default("") @mysql.VarChar(1000)
  policyCurrencyCode       String               @default("") @mysql.VarChar(3)
  totalMonthsOfCover       Int?
  totalSalesToBuyer        Int?
  maximumBuyerWillOwe      Int?
  creditLimit              Int?
  from_Application_policy  Application[]        @relation("Application_policy")

  @@index([applicationId])
}

model PolicyContact {
  id                             String        @id @default(cuid())
  application                    Application?  @relation("PolicyContact_application", fields: [applicationId], references: [id])
  applicationId                  String?       @map("application")
  firstName                      String        @default("") @mysql.VarChar(400)
  lastName                       String        @default("") @mysql.VarChar(400)
  email                          String        @default("") @mysql.VarChar(300)
  position                       String        @default("") @mysql.VarChar(50)
  isSameAsOwner                  Boolean?
  from_Application_policyContact Application[] @relation("Application_policyContact")

  @@index([applicationId])
}

model JointlyInsuredParty {
  id            String   @id @default(cuid())
  policy        Policy?  @relation("JointlyInsuredParty_policy", fields: [policyId], references: [id])
  policyId      String?  @unique @map("policy")
  requested     Boolean?
  companyName   String   @default("") @mysql.VarChar(200)
  companyNumber String   @default("") @mysql.VarChar(100)
  countryCode   String   @default("") @mysql.VarChar(3)
}

model ExportContract {
  id                              String                     @id @default(cuid())
  application                     Application?               @relation("ExportContract_application", fields: [applicationId], references: [id])
  applicationId                   String?                    @map("application")
  agent                           ExportContractAgent?       @relation("ExportContract_agent", fields: [agentId], references: [id])
  agentId                         String?                    @unique @map("agent")
  privateMarket                   PrivateMarket?             @relation("ExportContract_privateMarket", fields: [privateMarketId], references: [id])
  privateMarketId                 String?                    @unique @map("privateMarket")
  awardMethod                     ExportContractAwardMethod? @relation("ExportContract_awardMethod", fields: [awardMethodId], references: [id])
  awardMethodId                   String?                    @map("awardMethod")
  otherAwardMethod                String                     @default("") @mysql.VarChar(200)
  finalDestinationKnown           Boolean?
  finalDestinationCountryCode     String                     @default("") @mysql.VarChar(3)
  goodsOrServicesDescription      String                     @default("") @mysql.VarChar(1000)
  paymentTermsDescription         String                     @default("") @mysql.VarChar(1000)
  from_Application_exportContract Application[]              @relation("Application_exportContract")

  @@index([applicationId])
  @@index([awardMethodId])
}

model ExportContractAgent {
  id             String                      @id @default(cuid())
  exportContract ExportContract?             @relation("ExportContract_agent")
  service        ExportContractAgentService? @relation("ExportContractAgent_service", fields: [serviceId], references: [id])
  serviceId      String?                     @unique @map("service")
  countryCode    String                      @default("") @mysql.VarChar(3)
  fullAddress    String                      @default("") @mysql.VarChar(500)
  isUsingAgent   Boolean?
  name           String                      @default("") @mysql.VarChar(800)
}

model ExportContractAgentService {
  id                 String                            @id @default(cuid())
  agent              ExportContractAgent?              @relation("ExportContractAgent_service")
  charge             ExportContractAgentServiceCharge? @relation("ExportContractAgentService_charge", fields: [chargeId], references: [id])
  chargeId           String?                           @unique @map("charge")
  agentIsCharging    Boolean?
  serviceDescription String                            @default("") @mysql.VarChar(1000)
}

model ExportContractAgentServiceCharge {
  id                   String                      @id @default(cuid())
  service              ExportContractAgentService? @relation("ExportContractAgentService_charge")
  percentageCharge     Int?
  fixedSumAmount       Decimal?                    @mysql.Decimal(18, 2)
  fixedSumCurrencyCode String                      @default("GBP") @mysql.VarChar(3)
  method               String?
  payableCountryCode   String                      @default("") @mysql.VarChar(3)
}

model ExportContractAwardMethod {
  id                              String           @id @default(cuid())
  value                           String           @default("") @mysql.VarChar(50)
  from_ExportContract_awardMethod ExportContract[] @relation("ExportContract_awardMethod")
}

model PrivateMarket {
  id                  String          @id @default(cuid())
  exportContract      ExportContract? @relation("ExportContract_privateMarket")
  attempted           Boolean?
  declinedDescription String          @default("") @mysql.VarChar(1000)
}

model Account {
  id                               String                @id @default(cuid())
  createdAt                        DateTime?
  updatedAt                        DateTime?
  firstName                        String                @default("") @mysql.VarChar(400)
  lastName                         String                @default("") @mysql.VarChar(400)
  email                            String                @default("") @mysql.VarChar(300)
  salt                             String                @default("")
  hash                             String                @default("")
  verificationHash                 String                @default("")
  verificationExpiry               DateTime?
  otpSalt                          String                @default("")
  otpHash                          String                @default("") @mysql.VarChar(256)
  otpExpiry                        DateTime?
  sessionExpiry                    DateTime?
  sessionIdentifier                String                @default("")
  passwordResetHash                String                @default("")
  passwordResetExpiry              DateTime?
  authentication                   Authentication?       @relation("Account_authentication", fields: [authenticationId], references: [id])
  authenticationId                 String?               @map("authentication")
  authenticationRetry              AuthenticationRetry?  @relation("Account_authenticationRetry", fields: [authenticationRetryId], references: [id])
  authenticationRetryId            String?               @map("authenticationRetry")
  reactivationHash                 String                @default("")
  reactivationExpiry               DateTime?
  applications                     Application[]         @relation("Account_applications")
  status                           AccountStatus?        @relation("Account_status", fields: [statusId], references: [id])
  statusId                         String?               @unique @map("status")
  from_Application_owner           Application[]         @relation("Application_owner")
  from_AuthenticationRetry_account AuthenticationRetry[] @relation("AuthenticationRetry_account")
  from_Authentication_account      Authentication[]      @relation("Authentication_account")

  @@index([authenticationId])
  @@index([authenticationRetryId])
}

model AccountStatus {
  id         String    @id @default(cuid())
  account    Account?  @relation("Account_status")
  isVerified Boolean   @default(false)
  isBlocked  Boolean   @default(false)
  isInactive Boolean   @default(false)
  updatedAt  DateTime?
}

model AuthenticationRetry {
  id                               String    @id @default(cuid())
  account                          Account[] @relation("AuthenticationRetry_account")
  createdAt                        DateTime
  from_Account_authenticationRetry Account[] @relation("Account_authenticationRetry")
}

model Authentication {
  id                          String    @id @default(cuid())
  account                     Account[] @relation("Authentication_account")
  createdAt                   DateTime?
  salt                        String    @default("")
  hash                        String    @default("")
  from_Account_authentication Account[] @relation("Account_authentication")
}

model Business {
  id                          String        @id @default(cuid())
  application                 Application?  @relation("Business_application", fields: [applicationId], references: [id])
  applicationId               String?       @map("application")
  goodsOrServicesSupplied     String        @default("") @mysql.VarChar(1000)
  totalYearsExporting         Int?
  totalEmployeesUK            Int?
  totalEmployeesInternational Int?
  estimatedAnnualTurnover     Int?
  exportsTurnoverPercentage   Int?
  turnoverCurrencyCode        String        @default("GBP") @mysql.VarChar(3)
  hasCreditControlProcess     Boolean?
  from_Application_business   Application[] @relation("Application_business")

  @@index([applicationId])
}

model Broker {
  id                      String        @id @default(cuid())
  application             Application?  @relation("Broker_application", fields: [applicationId], references: [id])
  applicationId           String?       @map("application")
  isUsingBroker           Boolean?
  name                    String        @default("") @mysql.VarChar(800)
  addressLine1            String        @default("")
  addressLine2            String        @default("")
  town                    String        @default("")
  county                  String        @default("")
  postcode                String        @default("")
  fullAddress             String        @default("") @mysql.VarChar(500)
  email                   String        @default("") @mysql.VarChar(300)
  from_Application_broker Application[] @relation("Application_broker")

  @@index([applicationId])
}

model CompanyAddress {
  id           String   @id @default(cuid())
  company      Company? @relation("Company_registeredOfficeAddress")
  addressLine1 String   @default("")
  addressLine2 String   @default("")
  careOf       String   @default("")
  locality     String   @default("")
  region       String   @default("")
  postalCode   String   @default("")
  country      String   @default("")
  premises     String   @default("")
}

model Company {
  id                         String                          @id @default(cuid())
  application                Application?                    @relation("Company_application", fields: [applicationId], references: [id])
  applicationId              String?                         @map("application")
  registeredOfficeAddress    CompanyAddress?                 @relation("Company_registeredOfficeAddress", fields: [registeredOfficeAddressId], references: [id])
  registeredOfficeAddressId  String?                         @unique @map("registeredOfficeAddress")
  differentTradingAddress    CompanyDifferentTradingAddress? @relation("Company_differentTradingAddress", fields: [differentTradingAddressId], references: [id])
  differentTradingAddressId  String?                         @unique @map("differentTradingAddress")
  sicCodes                   CompanySicCode[]                @relation("CompanySicCode_company")
  companyName                String                          @default("") @mysql.VarChar(200)
  companyNumber              String                          @default("")
  dateOfCreation             DateTime?
  hasDifferentTradingAddress Boolean?
  differentTradingName       String                          @default("") @mysql.VarChar(200)
  hasDifferentTradingName    Boolean?
  companyWebsite             String                          @default("")
  phoneNumber                String                          @default("")
  financialYearEndDate       DateTime?
  from_Application_company   Application[]                   @relation("Application_company")

  @@index([applicationId])
}

model CompanyDifferentTradingAddress {
  id          String   @id @default(cuid())
  company     Company? @relation("Company_differentTradingAddress")
  fullAddress String   @default("") @mysql.VarChar(500)
}

model CompanySicCode {
  id                 String   @id @default(cuid())
  company            Company? @relation("CompanySicCode_company", fields: [companyId], references: [id])
  companyId          String?  @map("company")
  sicCode            String   @default("")
  industrySectorName String   @default("")

  @@index([companyId])
}

model Buyer {
  id                        String               @id @default(cuid())
  application               Application?         @relation("Buyer_application", fields: [applicationId], references: [id])
  applicationId             String?              @map("application")
  companyOrOrganisationName String               @default("") @mysql.VarChar(200)
  address                   String               @default("") @mysql.VarChar(500)
  country                   Country?             @relation("Buyer_country", fields: [countryId], references: [id])
  countryId                 String?              @map("country")
  registrationNumber        String               @default("") @mysql.VarChar(200)
  website                   String               @default("")
  buyerTradingHistory       BuyerTradingHistory? @relation("Buyer_buyerTradingHistory", fields: [buyerTradingHistoryId], references: [id])
  buyerTradingHistoryId     String?              @unique @map("buyerTradingHistory")
  contact                   BuyerContact?        @relation("Buyer_contact", fields: [contactId], references: [id])
  contactId                 String?              @unique @map("contact")
  relationship              BuyerRelationship?   @relation("Buyer_relationship", fields: [relationshipId], references: [id])
  relationshipId            String?              @unique @map("relationship")
  from_Application_buyer    Application[]        @relation("Application_buyer")

  @@index([applicationId])
  @@index([countryId])
}

model BuyerContact {
  id               String       @id @default(cuid())
  application      Application? @relation("BuyerContact_application", fields: [applicationId], references: [id])
  applicationId    String?      @map("application")
  buyer            Buyer?       @relation("Buyer_contact")
  contactFirstName String       @default("") @mysql.VarChar(200)
  contactLastName  String       @default("") @mysql.VarChar(200)
  contactPosition  String       @default("")
  contactEmail     String       @default("") @mysql.VarChar(300)
  canContactBuyer  Boolean?

  @@index([applicationId])
}

model BuyerRelationship {
  id                                          String       @id @default(cuid())
  application                                 Application? @relation("BuyerRelationship_application", fields: [applicationId], references: [id])
  applicationId                               String?      @map("application")
  buyer                                       Buyer?       @relation("Buyer_relationship")
  exporterIsConnectedWithBuyer                Boolean?
  connectionWithBuyerDescription              String       @default("") @mysql.VarChar(1000)
  exporterHasPreviousCreditInsuranceWithBuyer Boolean?
  exporterHasBuyerFinancialAccounts           Boolean?
  previousCreditInsuranceWithBuyerDescription String       @default("") @mysql.VarChar(1000)

  @@index([applicationId])
}

model BuyerTradingHistory {
  id                         String       @id @default(cuid())
  application                Application? @relation("BuyerTradingHistory_application", fields: [applicationId], references: [id])
  applicationId              String?      @map("application")
  buyer                      Buyer?       @relation("Buyer_buyerTradingHistory")
  currencyCode               String       @default("") @mysql.VarChar(3)
  outstandingPayments        Boolean?
  failedPayments             Boolean?
  exporterHasTradedWithBuyer Boolean?
  totalOutstandingPayments   Int?
  totalOverduePayments       Int?

  @@index([applicationId])
}

model Country {
  id                            String        @id @default(cuid())
  isoCode                       String        @default("")
  name                          String        @default("")
  from_Buyer_country            Buyer[]       @relation("Buyer_country")
  from_Eligibility_buyerCountry Eligibility[] @relation("Eligibility_buyerCountry")
}

model Eligibility {
  id                           String              @id @default(cuid())
  application                  Application?        @relation("Eligibility_application", fields: [applicationId], references: [id])
  applicationId                String?             @map("application")
  buyerCountry                 Country?            @relation("Eligibility_buyerCountry", fields: [buyerCountryId], references: [id])
  buyerCountryId               String?             @map("buyerCountry")
  coverPeriod                  CoverPeriod?        @relation("Eligibility_coverPeriod", fields: [coverPeriodId], references: [id])
  coverPeriodId                String?             @map("coverPeriod")
  hasEndBuyer                  Boolean             @default(false)
  hasMinimumUkGoodsOrServices  Boolean             @default(false)
  hasCompaniesHouseNumber      Boolean             @default(false)
  otherPartiesInvolved         Boolean             @default(false)
  paidByLetterOfCredit         Boolean             @default(false)
  totalContractValue           TotalContractValue? @relation("Eligibility_totalContractValue", fields: [totalContractValueId], references: [id])
  totalContractValueId         String?             @map("totalContractValue")
  validExporterLocation        Boolean             @default(false)
  isPartyToConsortium          Boolean             @default(false)
  isMemberOfAGroup             Boolean             @default(false)
  from_Application_eligibility Application[]       @relation("Application_eligibility")

  @@index([applicationId])
  @@index([buyerCountryId])
  @@index([coverPeriodId])
  @@index([totalContractValueId])
}

model SectionReview {
  id                             String        @id @default(cuid())
  application                    Application?  @relation("SectionReview_application", fields: [applicationId], references: [id])
  applicationId                  String?       @map("application")
  eligibility                    Boolean?
  business                       Boolean?
  buyer                          Boolean?
  exportContract                 Boolean?
  policy                         Boolean?
  from_Application_sectionReview Application[] @relation("Application_sectionReview")

  @@index([applicationId])
}

model Declaration {
  id                                     String               @id @default(cuid())
  application                            Application?         @relation("Declaration_application", fields: [applicationId], references: [id])
  applicationId                          String?              @map("application")
  version                                DeclarationVersion?  @relation("Declaration_version", fields: [versionId], references: [id])
  versionId                              String?              @map("version")
  agreeHowDataWillBeUsed                 Boolean?
  agreeToAntiBribery                     Boolean?
  agreeToConfidentiality                 Boolean?
  agreeToConfirmationAndAcknowledgements Boolean?
  hasAntiBriberyCodeOfConduct            Boolean?
  willExportWithAntiBriberyCodeOfConduct Boolean?
  from_Application_declaration           Application[]        @relation("Application_declaration")
  from_DeclarationVersion_declaration    DeclarationVersion[] @relation("DeclarationVersion_declaration")

  @@index([applicationId])
  @@index([versionId])
}

model DeclarationVersion {
  id                                     String        @id @default(cuid())
  declaration                            Declaration?  @relation("DeclarationVersion_declaration", fields: [declarationId], references: [id])
  declarationId                          String?       @map("declaration")
  agreeToConfidentiality                 String        @default("") @mysql.VarChar(3)
  agreeToAntiBribery                     String        @default("") @mysql.VarChar(3)
  hasAntiBriberyCodeOfConduct            String        @default("") @mysql.VarChar(3)
  willExportWithAntiBriberyCodeOfConduct String        @default("") @mysql.VarChar(3)
  agreeToConfirmationAndAcknowledgements String        @default("") @mysql.VarChar(3)
  agreeHowDataWillBeUsed                 String        @default("") @mysql.VarChar(3)
  from_Declaration_version               Declaration[] @relation("Declaration_version")

  @@index([declarationId])
}

model Page {
  id        String @id @default(cuid())
  heading   String @default("")
  metaTitle String @default("")
  content   Json   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model User {
  id       String @id @default(cuid())
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Feedback {
  id            String    @id @default(cuid())
  service       String    @default("")
  satisfaction  String?
  improvement   String    @default("") @mysql.VarChar(1200)
  otherComments String    @default("") @mysql.VarChar(1200)
  referralUrl   String    @default("") @mysql.VarChar(500)
  product       String    @default("")
  createdAt     DateTime?
}
