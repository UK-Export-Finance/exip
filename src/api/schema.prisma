// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model ReferenceNumber {
  id            Int          @id @default(autoincrement())
  application   Application? @relation("ReferenceNumber_application", fields: [applicationId], references: [id])
  applicationId String?      @map("application")

  @@index([applicationId])
}

model Application {
  id                               String            @id @default(cuid())
  createdAt                        DateTime?
  updatedAt                        DateTime?
  eligibility                      Eligibility?      @relation("Application_eligibility", fields: [eligibilityId], references: [id])
  eligibilityId                    String?           @map("eligibility")
  referenceNumber                  Int?
  submissionDeadline               DateTime?
  submissionDate                   DateTime?
  submissionType                   String?           @default("Manual Inclusion Application")
  status                           String            @default("")
  previousStatus                   String            @default("")
  policyAndExport                  PolicyAndExport?  @relation("Application_policyAndExport", fields: [policyAndExportId], references: [id])
  policyAndExportId                String?           @map("policyAndExport")
  owner                            Account?          @relation("Application_owner", fields: [ownerId], references: [id])
  ownerId                          String?           @map("owner")
  business                         Business?         @relation("Application_business", fields: [businessId], references: [id])
  businessId                       String?           @map("business")
  company                          Company?          @relation("Application_company", fields: [companyId], references: [id])
  companyId                        String?           @map("company")
  broker                           Broker?           @relation("Application_broker", fields: [brokerId], references: [id])
  brokerId                         String?           @map("broker")
  buyer                            Buyer?            @relation("Application_buyer", fields: [buyerId], references: [id])
  buyerId                          String?           @map("buyer")
  sectionReview                    SectionReview?    @relation("Application_sectionReview", fields: [sectionReviewId], references: [id])
  sectionReviewId                  String?           @map("sectionReview")
  declaration                      Declaration?      @relation("Application_declaration", fields: [declarationId], references: [id])
  declarationId                    String?           @map("declaration")
  version                          String            @default("")
  from_ReferenceNumber_application ReferenceNumber[] @relation("ReferenceNumber_application")
  from_PolicyAndExport_application PolicyAndExport[] @relation("PolicyAndExport_application")
  from_Account_applications        Account[]         @relation("Account_applications")
  from_Business_application        Business[]        @relation("Business_application")
  from_Broker_application          Broker[]          @relation("Broker_application")
  from_Company_application         Company[]         @relation("Company_application")
  from_Buyer_application           Buyer[]           @relation("Buyer_application")
  from_Eligibility_application     Eligibility[]     @relation("Eligibility_application")
  from_SectionReview_application   SectionReview[]   @relation("SectionReview_application")
  from_Declaration_application     Declaration[]     @relation("Declaration_application")

  @@index([eligibilityId])
  @@index([referenceNumber])
  @@index([policyAndExportId])
  @@index([ownerId])
  @@index([businessId])
  @@index([companyId])
  @@index([brokerId])
  @@index([buyerId])
  @@index([sectionReviewId])
  @@index([declarationId])
}

model PolicyAndExport {
  id                               String        @id @default(cuid())
  application                      Application?  @relation("PolicyAndExport_application", fields: [applicationId], references: [id])
  applicationId                    String?       @map("application")
  policyType                       String?
  requestedStartDate               DateTime?
  contractCompletionDate           DateTime?
  totalValueOfContract             Int?
  creditPeriodWithBuyer            String        @default("")
  policyCurrencyCode               String        @default("") @mysql.VarChar(1000)
  totalMonthsOfCover               Int?
  totalSalesToBuyer                Int?
  maximumBuyerWillOwe              Int?
  goodsOrServicesDescription       String        @default("") @mysql.VarChar(1000)
  finalDestinationCountryCode      String        @default("")
  from_Application_policyAndExport Application[] @relation("Application_policyAndExport")

  @@index([applicationId])
}

model Account {
  id                               String                @id @default(cuid())
  createdAt                        DateTime?
  updatedAt                        DateTime?
  firstName                        String                @default("")
  lastName                         String                @default("")
  email                            String                @default("")
  salt                             String                @default("")
  hash                             String                @default("")
  isVerified                       Boolean               @default(false)
  isBlocked                        Boolean               @default(false)
  verificationHash                 String                @default("")
  verificationExpiry               DateTime?
  otpSalt                          String                @default("")
  otpHash                          String                @default("") @mysql.VarChar(256)
  otpExpiry                        DateTime?
  sessionExpiry                    DateTime?
  sessionIdentifier                String                @default("")
  passwordResetHash                String                @default("")
  passwordResetExpiry              DateTime?
  authentication                   Authentication?       @relation("Account_authentication", fields: [authenticationId], references: [id])
  authenticationId                 String?               @map("authentication")
  authenticationRetry              AuthenticationRetry?  @relation("Account_authenticationRetry", fields: [authenticationRetryId], references: [id])
  authenticationRetryId            String?               @map("authenticationRetry")
  applications                     Application[]         @relation("Account_applications")
  from_Application_owner           Application[]         @relation("Application_owner")
  from_AuthenticationRetry_account AuthenticationRetry[] @relation("AuthenticationRetry_account")
  from_Authentication_account      Authentication[]      @relation("Authentication_account")

  @@index([authenticationId])
  @@index([authenticationRetryId])
}

model AuthenticationRetry {
  id                               String    @id @default(cuid())
  account                          Account[] @relation("AuthenticationRetry_account")
  createdAt                        DateTime
  from_Account_authenticationRetry Account[] @relation("Account_authenticationRetry")
}

model Authentication {
  id                          String    @id @default(cuid())
  account                     Account[] @relation("Authentication_account")
  createdAt                   DateTime?
  salt                        String    @default("")
  hash                        String    @default("")
  from_Account_authentication Account[] @relation("Account_authentication")
}

model Business {
  id                          String                 @id @default(cuid())
  application                 Application?           @relation("Business_application", fields: [applicationId], references: [id])
  applicationId               String?                @map("application")
  goodsOrServicesSupplied     String                 @default("") @mysql.VarChar(1000)
  totalYearsExporting         Int?
  totalEmployeesUK            Int?
  totalEmployeesInternational Int?
  estimatedAnnualTurnover     Int?
  exportsTurnoverPercentage   Int?
  businessContactDetail       BusinessContactDetail? @relation("Business_businessContactDetail", fields: [businessContactDetailId], references: [id])
  businessContactDetailId     String?                @unique @map("businessContactDetail")
  from_Application_business   Application[]          @relation("Application_business")

  @@index([applicationId])
}

model BusinessContactDetail {
  id        String    @id @default(cuid())
  business  Business? @relation("Business_businessContactDetail")
  firstName String    @default("")
  lastName  String    @default("")
  email     String    @default("")
  position  String    @default("")
}

model Broker {
  id                      String        @id @default(cuid())
  application             Application?  @relation("Broker_application", fields: [applicationId], references: [id])
  applicationId           String?       @map("application")
  isUsingBroker           String?
  name                    String        @default("")
  addressLine1            String        @default("")
  addressLine2            String        @default("")
  town                    String        @default("")
  county                  String        @default("")
  postcode                String        @default("")
  email                   String        @default("")
  from_Application_broker Application[] @relation("Application_broker")

  @@index([applicationId])
}

model CompanyAddress {
  id           String   @id @default(cuid())
  company      Company? @relation("Company_registeredOfficeAddress")
  addressLine1 String   @default("")
  addressLine2 String   @default("")
  careOf       String   @default("")
  locality     String   @default("")
  region       String   @default("")
  postalCode   String   @default("")
  country      String   @default("")
  premises     String   @default("")
}

model Company {
  id                        String           @id @default(cuid())
  application               Application?     @relation("Company_application", fields: [applicationId], references: [id])
  applicationId             String?          @map("application")
  registeredOfficeAddress   CompanyAddress?  @relation("Company_registeredOfficeAddress", fields: [registeredOfficeAddressId], references: [id])
  registeredOfficeAddressId String?          @unique @map("registeredOfficeAddress")
  sicCodes                  CompanySicCode[] @relation("CompanySicCode_company")
  companyName               String           @default("")
  companyNumber             String           @default("")
  dateOfCreation            DateTime?
  hasTradingAddress         String?
  hasTradingName            String?
  companyWebsite            String           @default("")
  phoneNumber               String           @default("")
  financialYearEndDate      DateTime?
  from_Application_company  Application[]    @relation("Application_company")

  @@index([applicationId])
}

model CompanySicCode {
  id                 String   @id @default(cuid())
  company            Company? @relation("CompanySicCode_company", fields: [companyId], references: [id])
  companyId          String?  @map("company")
  sicCode            String   @default("")
  industrySectorName String   @default("")

  @@index([companyId])
}

model Buyer {
  id                           String        @id @default(cuid())
  application                  Application?  @relation("Buyer_application", fields: [applicationId], references: [id])
  applicationId                String?       @map("application")
  companyOrOrganisationName    String        @default("")
  address                      String        @default("") @mysql.VarChar(1000)
  country                      Country?      @relation("Buyer_country", fields: [countryId], references: [id])
  countryId                    String?       @map("country")
  registrationNumber           String        @default("")
  website                      String        @default("")
  contactFirstName             String        @default("")
  contactLastName              String        @default("")
  contactPosition              String        @default("")
  contactEmail                 String        @default("")
  canContactBuyer              String?
  exporterIsConnectedWithBuyer String?
  exporterHasTradedWithBuyer   String?
  from_Application_buyer       Application[] @relation("Application_buyer")

  @@index([applicationId])
  @@index([countryId])
}

model Country {
  id                            String        @id @default(cuid())
  isoCode                       String        @default("")
  name                          String        @default("")
  from_Buyer_country            Buyer[]       @relation("Buyer_country")
  from_Eligibility_buyerCountry Eligibility[] @relation("Eligibility_buyerCountry")
}

model Eligibility {
  id                           String        @id @default(cuid())
  application                  Application?  @relation("Eligibility_application", fields: [applicationId], references: [id])
  applicationId                String?       @map("application")
  buyerCountry                 Country?      @relation("Eligibility_buyerCountry", fields: [buyerCountryId], references: [id])
  buyerCountryId               String?       @map("buyerCountry")
  hasMinimumUkGoodsOrServices  Boolean       @default(false)
  validExporterLocation        Boolean       @default(false)
  hasCompaniesHouseNumber      Boolean       @default(false)
  otherPartiesInvolved         Boolean       @default(false)
  paidByLetterOfCredit         Boolean       @default(false)
  needPreCreditPeriodCover     Boolean       @default(false)
  wantCoverOverMaxAmount       Boolean       @default(false)
  wantCoverOverMaxPeriod       Boolean       @default(false)
  from_Application_eligibility Application[] @relation("Application_eligibility")

  @@index([applicationId])
  @@index([buyerCountryId])
}

model SectionReview {
  id                             String        @id @default(cuid())
  application                    Application?  @relation("SectionReview_application", fields: [applicationId], references: [id])
  applicationId                  String?       @map("application")
  eligibility                    Boolean       @default(false)
  policyAndExport                Boolean       @default(false)
  business                       Boolean       @default(false)
  buyer                          Boolean       @default(false)
  from_Application_sectionReview Application[] @relation("Application_sectionReview")

  @@index([applicationId])
}

model Declaration {
  id                                     String                                     @id @default(cuid())
  application                            Application?                               @relation("Declaration_application", fields: [applicationId], references: [id])
  applicationId                          String?                                    @map("application")
  antiBribery                            DeclarationAntiBribery?                    @relation("Declaration_antiBribery", fields: [antiBriberyId], references: [id])
  antiBriberyId                          String?                                    @map("antiBribery")
  confirmationAndAcknowledgements        DeclarationConfirmationAndAcknowledgement? @relation("Declaration_confirmationAndAcknowledgements", fields: [confirmationAndAcknowledgementsId], references: [id])
  confirmationAndAcknowledgementsId      String?                                    @map("confirmationAndAcknowledgements")
  howDataWillBeUsed                      DeclarationHowDataWillBeUsed?              @relation("Declaration_howDataWillBeUsed", fields: [howDataWillBeUsedId], references: [id])
  howDataWillBeUsedId                    String?                                    @map("howDataWillBeUsed")
  agreeToConfidentiality                 Boolean                                    @default(false)
  agreeToAntiBribery                     Boolean                                    @default(false)
  hasAntiBriberyCodeOfConduct            String?
  willExportWithAntiBriberyCodeOfConduct String?
  agreeToConfirmationAndAcknowledgements Boolean                                    @default(false)
  agreeHowDataWillBeUsed                 Boolean                                    @default(false)
  from_Application_declaration           Application[]                              @relation("Application_declaration")

  @@index([applicationId])
  @@index([antiBriberyId])
  @@index([confirmationAndAcknowledgementsId])
  @@index([howDataWillBeUsedId])
}

model DeclarationAntiBribery {
  id                           String        @id @default(cuid())
  version                      String        @default("")
  content                      Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_Declaration_antiBribery Declaration[] @relation("Declaration_antiBribery")
}

model DeclarationConfirmationAndAcknowledgement {
  id                                               String        @id @default(cuid())
  version                                          String        @default("")
  content                                          Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_Declaration_confirmationAndAcknowledgements Declaration[] @relation("Declaration_confirmationAndAcknowledgements")
}

model DeclarationHowDataWillBeUsed {
  id                                 String        @id @default(cuid())
  version                            String        @default("")
  content                            Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_Declaration_howDataWillBeUsed Declaration[] @relation("Declaration_howDataWillBeUsed")
}

model Page {
  id        String @id @default(cuid())
  heading   String @default("")
  metaTitle String @default("")
  content   Json   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model User {
  id       String @id @default(cuid())
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Feedback {
  id            String    @id @default(cuid())
  service       String    @default("")
  satisfaction  String?
  improvement   String    @default("") @mysql.VarChar(1200)
  otherComments String    @default("") @mysql.VarChar(1200)
  referralUrl   String    @default("") @mysql.VarChar(500)
  product       String    @default("")
  createdAt     DateTime?
}
