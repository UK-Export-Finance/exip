# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type ReferenceNumber {
  id: ID!
  application: Application
}

input ReferenceNumberWhereUniqueInput {
  id: ID
}

input ReferenceNumberWhereInput {
  AND: [ReferenceNumberWhereInput!]
  OR: [ReferenceNumberWhereInput!]
  NOT: [ReferenceNumberWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input ReferenceNumberOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ReferenceNumberUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
}

input ApplicationRelateToOneForUpdateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
  disconnect: Boolean
}

input ReferenceNumberUpdateArgs {
  where: ReferenceNumberWhereUniqueInput!
  data: ReferenceNumberUpdateInput!
}

input ReferenceNumberCreateInput {
  application: ApplicationRelateToOneForCreateInput
}

input ApplicationRelateToOneForCreateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
}

type Application {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: Eligibility
  referenceNumber: Int
  submissionDeadline: DateTime
  submissionType: String
  policyAndExport: PolicyAndExport
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  eligibility: EligibilityWhereInput
  referenceNumber: IntNullableFilter
  submissionDeadline: DateTimeNullableFilter
  submissionType: StringNullableFilter
  policyAndExport: PolicyAndExportWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ApplicationOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  referenceNumber: OrderDirection
  submissionDeadline: OrderDirection
  submissionType: OrderDirection
}

input ApplicationUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: EligibilityRelateToOneForUpdateInput
  referenceNumber: Int
  submissionDeadline: DateTime
  submissionType: String
  policyAndExport: PolicyAndExportRelateToOneForUpdateInput
}

input EligibilityRelateToOneForUpdateInput {
  create: EligibilityCreateInput
  connect: EligibilityWhereUniqueInput
  disconnect: Boolean
}

input PolicyAndExportRelateToOneForUpdateInput {
  create: PolicyAndExportCreateInput
  connect: PolicyAndExportWhereUniqueInput
  disconnect: Boolean
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: EligibilityRelateToOneForCreateInput
  referenceNumber: Int
  submissionDeadline: DateTime
  submissionType: String
  policyAndExport: PolicyAndExportRelateToOneForCreateInput
}

input EligibilityRelateToOneForCreateInput {
  create: EligibilityCreateInput
  connect: EligibilityWhereUniqueInput
}

input PolicyAndExportRelateToOneForCreateInput {
  create: PolicyAndExportCreateInput
  connect: PolicyAndExportWhereUniqueInput
}

type PolicyAndExport {
  id: ID!
  application: Application
  policyType: String
  requestedStartDate: DateTime
  totalValueOfContract: Int
  policyCurrencyCode: String
}

input PolicyAndExportWhereUniqueInput {
  id: ID
}

input PolicyAndExportWhereInput {
  AND: [PolicyAndExportWhereInput!]
  OR: [PolicyAndExportWhereInput!]
  NOT: [PolicyAndExportWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  policyType: StringNullableFilter
  requestedStartDate: DateTimeNullableFilter
  totalValueOfContract: IntNullableFilter
  policyCurrencyCode: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PolicyAndExportOrderByInput {
  id: OrderDirection
  policyType: OrderDirection
  requestedStartDate: OrderDirection
  totalValueOfContract: OrderDirection
  policyCurrencyCode: OrderDirection
}

input PolicyAndExportUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  policyType: String
  requestedStartDate: DateTime
  totalValueOfContract: Int
  policyCurrencyCode: String
}

input PolicyAndExportUpdateArgs {
  where: PolicyAndExportWhereUniqueInput!
  data: PolicyAndExportUpdateInput!
}

input PolicyAndExportCreateInput {
  application: ApplicationRelateToOneForCreateInput
  policyType: String
  requestedStartDate: DateTime
  totalValueOfContract: Int
  policyCurrencyCode: String
}

type Country {
  id: ID!
  isoCode: String
  name: String
}

input CountryWhereUniqueInput {
  id: ID
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  isoCode: StringFilter
  name: StringFilter
}

input CountryOrderByInput {
  id: OrderDirection
  isoCode: OrderDirection
  name: OrderDirection
}

input CountryUpdateInput {
  isoCode: String
  name: String
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  isoCode: String
  name: String
}

type Eligibility {
  id: ID!
  application: Application
  buyerCountry: Country
  hasMinimumUkGoodsOrServices: Boolean
  validExporterLocation: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  needPreCreditPeriodCover: Boolean
  wantCoverOverMaxAmount: Boolean
  wantCoverOverMaxPeriod: Boolean
}

input EligibilityWhereUniqueInput {
  id: ID
}

input EligibilityWhereInput {
  AND: [EligibilityWhereInput!]
  OR: [EligibilityWhereInput!]
  NOT: [EligibilityWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  buyerCountry: CountryWhereInput
  hasMinimumUkGoodsOrServices: BooleanFilter
  validExporterLocation: BooleanFilter
  hasCompaniesHouseNumber: BooleanFilter
  otherPartiesInvolved: BooleanFilter
  paidByLetterOfCredit: BooleanFilter
  needPreCreditPeriodCover: BooleanFilter
  wantCoverOverMaxAmount: BooleanFilter
  wantCoverOverMaxPeriod: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input EligibilityOrderByInput {
  id: OrderDirection
  hasMinimumUkGoodsOrServices: OrderDirection
  validExporterLocation: OrderDirection
  hasCompaniesHouseNumber: OrderDirection
  otherPartiesInvolved: OrderDirection
  paidByLetterOfCredit: OrderDirection
  needPreCreditPeriodCover: OrderDirection
  wantCoverOverMaxAmount: OrderDirection
  wantCoverOverMaxPeriod: OrderDirection
}

input EligibilityUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  buyerCountry: CountryRelateToOneForUpdateInput
  hasMinimumUkGoodsOrServices: Boolean
  validExporterLocation: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  needPreCreditPeriodCover: Boolean
  wantCoverOverMaxAmount: Boolean
  wantCoverOverMaxPeriod: Boolean
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input EligibilityUpdateArgs {
  where: EligibilityWhereUniqueInput!
  data: EligibilityUpdateInput!
}

input EligibilityCreateInput {
  application: ApplicationRelateToOneForCreateInput
  buyerCountry: CountryRelateToOneForCreateInput
  hasMinimumUkGoodsOrServices: Boolean
  validExporterLocation: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  needPreCreditPeriodCover: Boolean
  wantCoverOverMaxAmount: Boolean
  wantCoverOverMaxPeriod: Boolean
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

type Page {
  id: ID!
  heading: String
  metaTitle: String
  content: Page_content_Document
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  heading: StringFilter
  metaTitle: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  heading: OrderDirection
  metaTitle: OrderDirection
}

input PageUpdateInput {
  heading: String
  metaTitle: String
  content: JSON
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  heading: String
  metaTitle: String
  content: JSON
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createReferenceNumber(data: ReferenceNumberCreateInput!): ReferenceNumber
  createReferenceNumbers(data: [ReferenceNumberCreateInput!]!): [ReferenceNumber]
  updateReferenceNumber(where: ReferenceNumberWhereUniqueInput!, data: ReferenceNumberUpdateInput!): ReferenceNumber
  updateReferenceNumbers(data: [ReferenceNumberUpdateArgs!]!): [ReferenceNumber]
  deleteReferenceNumber(where: ReferenceNumberWhereUniqueInput!): ReferenceNumber
  deleteReferenceNumbers(where: [ReferenceNumberWhereUniqueInput!]!): [ReferenceNumber]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(where: ApplicationWhereUniqueInput!, data: ApplicationUpdateInput!): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createPolicyAndExport(data: PolicyAndExportCreateInput!): PolicyAndExport
  createPolicyAndExports(data: [PolicyAndExportCreateInput!]!): [PolicyAndExport]
  updatePolicyAndExport(where: PolicyAndExportWhereUniqueInput!, data: PolicyAndExportUpdateInput!): PolicyAndExport
  updatePolicyAndExports(data: [PolicyAndExportUpdateArgs!]!): [PolicyAndExport]
  deletePolicyAndExport(where: PolicyAndExportWhereUniqueInput!): PolicyAndExport
  deletePolicyAndExports(where: [PolicyAndExportWhereUniqueInput!]!): [PolicyAndExport]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(where: CountryWhereUniqueInput!, data: CountryUpdateInput!): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createEligibility(data: EligibilityCreateInput!): Eligibility
  createEligibilities(data: [EligibilityCreateInput!]!): [Eligibility]
  updateEligibility(where: EligibilityWhereUniqueInput!, data: EligibilityUpdateInput!): Eligibility
  updateEligibilities(data: [EligibilityUpdateArgs!]!): [Eligibility]
  deleteEligibility(where: EligibilityWhereUniqueInput!): Eligibility
  deleteEligibilities(where: [EligibilityWhereUniqueInput!]!): [Eligibility]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!

  """ send an email """
  sendEmail(templateId: String!, sendToEmailAddress: String!): EmailResponse
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  referenceNumbers(where: ReferenceNumberWhereInput! = {}, orderBy: [ReferenceNumberOrderByInput!]! = [], take: Int, skip: Int! = 0): [ReferenceNumber!]
  referenceNumber(where: ReferenceNumberWhereUniqueInput!): ReferenceNumber
  referenceNumbersCount(where: ReferenceNumberWhereInput! = {}): Int
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Application!]
  application(where: ApplicationWhereUniqueInput!): Application
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  policyAndExports(where: PolicyAndExportWhereInput! = {}, orderBy: [PolicyAndExportOrderByInput!]! = [], take: Int, skip: Int! = 0): [PolicyAndExport!]
  policyAndExport(where: PolicyAndExportWhereUniqueInput!): PolicyAndExport
  policyAndExportsCount(where: PolicyAndExportWhereInput! = {}): Int
  countries(where: CountryWhereInput! = {}, orderBy: [CountryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  eligibilities(where: EligibilityWhereInput! = {}, orderBy: [EligibilityOrderByInput!]! = [], take: Int, skip: Int! = 0): [Eligibility!]
  eligibility(where: EligibilityWhereUniqueInput!): Eligibility
  eligibilitiesCount(where: EligibilityWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem

  """ get companies house information """
  getCompaniesHouseInformation(companiesHouseNumber: String!): CompaniesHouseResponse
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type EmailResponse {
  success: Boolean
}

type CompanyAddress {
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

type CompaniesHouseResponse {
  companyName: String
  registeredOfficeAddress: CompanyAddress
  companyNumber: String
  dateOfCreation: String
  sicCodes: [String]
  success: Boolean
  apiError: Boolean
}
