# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type ReferenceNumber {
  id: ID!
  application: Application
}

input ReferenceNumberWhereUniqueInput {
  id: ID
}

input ReferenceNumberWhereInput {
  AND: [ReferenceNumberWhereInput!]
  OR: [ReferenceNumberWhereInput!]
  NOT: [ReferenceNumberWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input ReferenceNumberOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ReferenceNumberUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
}

input ApplicationRelateToOneForUpdateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
  disconnect: Boolean
}

input ReferenceNumberUpdateArgs {
  where: ReferenceNumberWhereUniqueInput!
  data: ReferenceNumberUpdateInput!
}

input ReferenceNumberCreateInput {
  application: ApplicationRelateToOneForCreateInput
}

input ApplicationRelateToOneForCreateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
}

type Application {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: Eligibility
  referenceNumber: Int
  submissionCount: Int
  submissionDate: DateTime
  submissionDeadline: DateTime
  submissionType: String
  status: String
  previousStatus: String
  policy: Policy
  exportContract: ExportContract
  owner: Account
  business: Business
  company: Company
  broker: Broker
  buyer: Buyer
  sectionReview: SectionReview
  declaration: Declaration
  policyContact: PolicyContact
  version: String
  dealType: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  eligibility: EligibilityWhereInput
  referenceNumber: IntNullableFilter
  submissionCount: IntFilter
  submissionDate: DateTimeNullableFilter
  submissionDeadline: DateTimeNullableFilter
  submissionType: StringNullableFilter
  status: StringFilter
  previousStatus: StringFilter
  policy: PolicyWhereInput
  exportContract: ExportContractWhereInput
  owner: AccountWhereInput
  business: BusinessWhereInput
  company: CompanyWhereInput
  broker: BrokerWhereInput
  buyer: BuyerWhereInput
  sectionReview: SectionReviewWhereInput
  declaration: DeclarationWhereInput
  policyContact: PolicyContactWhereInput
  version: StringFilter
  dealType: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ApplicationOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  referenceNumber: OrderDirection
  submissionCount: OrderDirection
  submissionDate: OrderDirection
  submissionDeadline: OrderDirection
  submissionType: OrderDirection
  status: OrderDirection
  previousStatus: OrderDirection
  version: OrderDirection
  dealType: OrderDirection
}

input ApplicationUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: EligibilityRelateToOneForUpdateInput
  referenceNumber: Int
  submissionCount: Int
  submissionDate: DateTime
  submissionDeadline: DateTime
  submissionType: String
  status: String
  previousStatus: String
  policy: PolicyRelateToOneForUpdateInput
  exportContract: ExportContractRelateToOneForUpdateInput
  owner: AccountRelateToOneForUpdateInput
  business: BusinessRelateToOneForUpdateInput
  company: CompanyRelateToOneForUpdateInput
  broker: BrokerRelateToOneForUpdateInput
  buyer: BuyerRelateToOneForUpdateInput
  sectionReview: SectionReviewRelateToOneForUpdateInput
  declaration: DeclarationRelateToOneForUpdateInput
  policyContact: PolicyContactRelateToOneForUpdateInput
  version: String
  dealType: String
}

input EligibilityRelateToOneForUpdateInput {
  create: EligibilityCreateInput
  connect: EligibilityWhereUniqueInput
  disconnect: Boolean
}

input PolicyRelateToOneForUpdateInput {
  create: PolicyCreateInput
  connect: PolicyWhereUniqueInput
  disconnect: Boolean
}

input ExportContractRelateToOneForUpdateInput {
  create: ExportContractCreateInput
  connect: ExportContractWhereUniqueInput
  disconnect: Boolean
}

input AccountRelateToOneForUpdateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
}

input BusinessRelateToOneForUpdateInput {
  create: BusinessCreateInput
  connect: BusinessWhereUniqueInput
  disconnect: Boolean
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input BrokerRelateToOneForUpdateInput {
  create: BrokerCreateInput
  connect: BrokerWhereUniqueInput
  disconnect: Boolean
}

input BuyerRelateToOneForUpdateInput {
  create: BuyerCreateInput
  connect: BuyerWhereUniqueInput
  disconnect: Boolean
}

input SectionReviewRelateToOneForUpdateInput {
  create: SectionReviewCreateInput
  connect: SectionReviewWhereUniqueInput
  disconnect: Boolean
}

input DeclarationRelateToOneForUpdateInput {
  create: DeclarationCreateInput
  connect: DeclarationWhereUniqueInput
  disconnect: Boolean
}

input PolicyContactRelateToOneForUpdateInput {
  create: PolicyContactCreateInput
  connect: PolicyContactWhereUniqueInput
  disconnect: Boolean
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: EligibilityRelateToOneForCreateInput
  referenceNumber: Int
  submissionCount: Int
  submissionDate: DateTime
  submissionDeadline: DateTime
  submissionType: String
  status: String
  previousStatus: String
  policy: PolicyRelateToOneForCreateInput
  exportContract: ExportContractRelateToOneForCreateInput
  owner: AccountRelateToOneForCreateInput
  business: BusinessRelateToOneForCreateInput
  company: CompanyRelateToOneForCreateInput
  broker: BrokerRelateToOneForCreateInput
  buyer: BuyerRelateToOneForCreateInput
  sectionReview: SectionReviewRelateToOneForCreateInput
  declaration: DeclarationRelateToOneForCreateInput
  policyContact: PolicyContactRelateToOneForCreateInput
  version: String
  dealType: String
}

input EligibilityRelateToOneForCreateInput {
  create: EligibilityCreateInput
  connect: EligibilityWhereUniqueInput
}

input PolicyRelateToOneForCreateInput {
  create: PolicyCreateInput
  connect: PolicyWhereUniqueInput
}

input ExportContractRelateToOneForCreateInput {
  create: ExportContractCreateInput
  connect: ExportContractWhereUniqueInput
}

input AccountRelateToOneForCreateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

input BusinessRelateToOneForCreateInput {
  create: BusinessCreateInput
  connect: BusinessWhereUniqueInput
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input BrokerRelateToOneForCreateInput {
  create: BrokerCreateInput
  connect: BrokerWhereUniqueInput
}

input BuyerRelateToOneForCreateInput {
  create: BuyerCreateInput
  connect: BuyerWhereUniqueInput
}

input SectionReviewRelateToOneForCreateInput {
  create: SectionReviewCreateInput
  connect: SectionReviewWhereUniqueInput
}

input DeclarationRelateToOneForCreateInput {
  create: DeclarationCreateInput
  connect: DeclarationWhereUniqueInput
}

input PolicyContactRelateToOneForCreateInput {
  create: PolicyContactCreateInput
  connect: PolicyContactWhereUniqueInput
}

type TotalContractValue {
  id: ID!
  valueId: Int
  value: String
}

input TotalContractValueWhereUniqueInput {
  id: ID
}

input TotalContractValueWhereInput {
  AND: [TotalContractValueWhereInput!]
  OR: [TotalContractValueWhereInput!]
  NOT: [TotalContractValueWhereInput!]
  id: IDFilter
  valueId: IntNullableFilter
  value: StringFilter
}

input TotalContractValueOrderByInput {
  id: OrderDirection
  valueId: OrderDirection
  value: OrderDirection
}

input TotalContractValueUpdateInput {
  valueId: Int
  value: String
}

input TotalContractValueUpdateArgs {
  where: TotalContractValueWhereUniqueInput!
  data: TotalContractValueUpdateInput!
}

input TotalContractValueCreateInput {
  valueId: Int
  value: String
}

type CoverPeriod {
  id: ID!
  valueId: Int
  value: String
}

input CoverPeriodWhereUniqueInput {
  id: ID
}

input CoverPeriodWhereInput {
  AND: [CoverPeriodWhereInput!]
  OR: [CoverPeriodWhereInput!]
  NOT: [CoverPeriodWhereInput!]
  id: IDFilter
  valueId: IntNullableFilter
  value: StringFilter
}

input CoverPeriodOrderByInput {
  id: OrderDirection
  valueId: OrderDirection
  value: OrderDirection
}

input CoverPeriodUpdateInput {
  valueId: Int
  value: String
}

input CoverPeriodUpdateArgs {
  where: CoverPeriodWhereUniqueInput!
  data: CoverPeriodUpdateInput!
}

input CoverPeriodCreateInput {
  valueId: Int
  value: String
}

type Policy {
  id: ID!
  application: Application
  needPreCreditPeriodCover: Boolean
  policyType: String
  requestedStartDate: DateTime
  contractCompletionDate: DateTime
  totalValueOfContract: Int
  creditPeriodWithBuyer: String
  policyCurrencyCode: String
  totalMonthsOfCover: Int
  totalSalesToBuyer: Int
  maximumBuyerWillOwe: Int
}

input PolicyWhereUniqueInput {
  id: ID
}

input PolicyWhereInput {
  AND: [PolicyWhereInput!]
  OR: [PolicyWhereInput!]
  NOT: [PolicyWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  policyType: StringNullableFilter
  requestedStartDate: DateTimeNullableFilter
  contractCompletionDate: DateTimeNullableFilter
  totalValueOfContract: IntNullableFilter
  creditPeriodWithBuyer: StringFilter
  policyCurrencyCode: StringFilter
  totalMonthsOfCover: IntNullableFilter
  totalSalesToBuyer: IntNullableFilter
  maximumBuyerWillOwe: IntNullableFilter
}

input PolicyOrderByInput {
  id: OrderDirection
  policyType: OrderDirection
  requestedStartDate: OrderDirection
  contractCompletionDate: OrderDirection
  totalValueOfContract: OrderDirection
  creditPeriodWithBuyer: OrderDirection
  policyCurrencyCode: OrderDirection
  totalMonthsOfCover: OrderDirection
  totalSalesToBuyer: OrderDirection
  maximumBuyerWillOwe: OrderDirection
}

input PolicyUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  needPreCreditPeriodCover: Boolean
  policyType: String
  requestedStartDate: DateTime
  contractCompletionDate: DateTime
  totalValueOfContract: Int
  creditPeriodWithBuyer: String
  policyCurrencyCode: String
  totalMonthsOfCover: Int
  totalSalesToBuyer: Int
  maximumBuyerWillOwe: Int
}

input PolicyUpdateArgs {
  where: PolicyWhereUniqueInput!
  data: PolicyUpdateInput!
}

input PolicyCreateInput {
  application: ApplicationRelateToOneForCreateInput
  needPreCreditPeriodCover: Boolean
  policyType: String
  requestedStartDate: DateTime
  contractCompletionDate: DateTime
  totalValueOfContract: Int
  creditPeriodWithBuyer: String
  policyCurrencyCode: String
  totalMonthsOfCover: Int
  totalSalesToBuyer: Int
  maximumBuyerWillOwe: Int
}

type PolicyContact {
  id: ID!
  application: Application
  firstName: String
  lastName: String
  email: String
  position: String
  isSameAsOwner: Boolean
}

input PolicyContactWhereUniqueInput {
  id: ID
}

input PolicyContactWhereInput {
  AND: [PolicyContactWhereInput!]
  OR: [PolicyContactWhereInput!]
  NOT: [PolicyContactWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  position: StringFilter
}

input PolicyContactOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  position: OrderDirection
}

input PolicyContactUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  firstName: String
  lastName: String
  email: String
  position: String
  isSameAsOwner: Boolean
}

input PolicyContactUpdateArgs {
  where: PolicyContactWhereUniqueInput!
  data: PolicyContactUpdateInput!
}

input PolicyContactCreateInput {
  application: ApplicationRelateToOneForCreateInput
  firstName: String
  lastName: String
  email: String
  position: String
  isSameAsOwner: Boolean
}

type ExportContract {
  id: ID!
  application: Application
  goodsOrServicesDescription: String
  finalDestinationKnown: Boolean
  finalDestinationCountryCode: String
}

input ExportContractWhereUniqueInput {
  id: ID
}

input ExportContractWhereInput {
  AND: [ExportContractWhereInput!]
  OR: [ExportContractWhereInput!]
  NOT: [ExportContractWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  goodsOrServicesDescription: StringFilter
  finalDestinationCountryCode: StringFilter
}

input ExportContractOrderByInput {
  id: OrderDirection
  goodsOrServicesDescription: OrderDirection
  finalDestinationCountryCode: OrderDirection
}

input ExportContractUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  goodsOrServicesDescription: String
  finalDestinationKnown: Boolean
  finalDestinationCountryCode: String
}

input ExportContractUpdateArgs {
  where: ExportContractWhereUniqueInput!
  data: ExportContractUpdateInput!
}

input ExportContractCreateInput {
  application: ApplicationRelateToOneForCreateInput
  goodsOrServicesDescription: String
  finalDestinationKnown: Boolean
  finalDestinationCountryCode: String
}

type Account {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  salt: String
  hash: String
  isVerified: Boolean
  isBlocked: Boolean
  verificationHash: String
  verificationExpiry: DateTime
  otpSalt: String
  otpHash: String
  otpExpiry: DateTime
  sessionExpiry: DateTime
  sessionIdentifier: String
  passwordResetHash: String
  passwordResetExpiry: DateTime
  authentication: Authentication
  authenticationRetry: AuthenticationRetry
  reactivationHash: String
  reactivationExpiry: DateTime
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  salt: StringFilter
  hash: StringFilter
  isVerified: BooleanFilter
  isBlocked: BooleanFilter
  verificationHash: StringFilter
  verificationExpiry: DateTimeNullableFilter
  otpSalt: StringFilter
  otpHash: StringFilter
  otpExpiry: DateTimeNullableFilter
  sessionExpiry: DateTimeNullableFilter
  sessionIdentifier: StringFilter
  passwordResetHash: StringFilter
  passwordResetExpiry: DateTimeNullableFilter
  authentication: AuthenticationWhereInput
  authenticationRetry: AuthenticationRetryWhereInput
  reactivationHash: StringFilter
  reactivationExpiry: DateTimeNullableFilter
  applications: ApplicationManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ApplicationManyRelationFilter {
  every: ApplicationWhereInput
  some: ApplicationWhereInput
  none: ApplicationWhereInput
}

input AccountOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  salt: OrderDirection
  hash: OrderDirection
  isVerified: OrderDirection
  isBlocked: OrderDirection
  verificationHash: OrderDirection
  verificationExpiry: OrderDirection
  otpSalt: OrderDirection
  otpHash: OrderDirection
  otpExpiry: OrderDirection
  sessionExpiry: OrderDirection
  sessionIdentifier: OrderDirection
  passwordResetHash: OrderDirection
  passwordResetExpiry: OrderDirection
  reactivationHash: OrderDirection
  reactivationExpiry: OrderDirection
}

input AccountUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  salt: String
  hash: String
  isVerified: Boolean
  isBlocked: Boolean
  verificationHash: String
  verificationExpiry: DateTime
  otpSalt: String
  otpHash: String
  otpExpiry: DateTime
  sessionExpiry: DateTime
  sessionIdentifier: String
  passwordResetHash: String
  passwordResetExpiry: DateTime
  authentication: AuthenticationRelateToOneForUpdateInput
  authenticationRetry: AuthenticationRetryRelateToOneForUpdateInput
  reactivationHash: String
  reactivationExpiry: DateTime
  applications: ApplicationRelateToManyForUpdateInput
}

input AuthenticationRelateToOneForUpdateInput {
  create: AuthenticationCreateInput
  connect: AuthenticationWhereUniqueInput
  disconnect: Boolean
}

input AuthenticationRetryRelateToOneForUpdateInput {
  create: AuthenticationRetryCreateInput
  connect: AuthenticationRetryWhereUniqueInput
  disconnect: Boolean
}

input ApplicationRelateToManyForUpdateInput {
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  salt: String
  hash: String
  isVerified: Boolean
  isBlocked: Boolean
  verificationHash: String
  verificationExpiry: DateTime
  otpSalt: String
  otpHash: String
  otpExpiry: DateTime
  sessionExpiry: DateTime
  sessionIdentifier: String
  passwordResetHash: String
  passwordResetExpiry: DateTime
  authentication: AuthenticationRelateToOneForCreateInput
  authenticationRetry: AuthenticationRetryRelateToOneForCreateInput
  reactivationHash: String
  reactivationExpiry: DateTime
  applications: ApplicationRelateToManyForCreateInput
}

input AuthenticationRelateToOneForCreateInput {
  create: AuthenticationCreateInput
  connect: AuthenticationWhereUniqueInput
}

input AuthenticationRetryRelateToOneForCreateInput {
  create: AuthenticationRetryCreateInput
  connect: AuthenticationRetryWhereUniqueInput
}

input ApplicationRelateToManyForCreateInput {
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

type AuthenticationRetry {
  id: ID!
  account(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountCount(where: AccountWhereInput! = {}): Int
  createdAt: DateTime
}

input AuthenticationRetryWhereUniqueInput {
  id: ID
}

input AuthenticationRetryWhereInput {
  AND: [AuthenticationRetryWhereInput!]
  OR: [AuthenticationRetryWhereInput!]
  NOT: [AuthenticationRetryWhereInput!]
  id: IDFilter
  account: AccountManyRelationFilter
  createdAt: DateTimeFilter
}

input AccountManyRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input AuthenticationRetryOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input AuthenticationRetryUpdateInput {
  account: AccountRelateToManyForUpdateInput
  createdAt: DateTime
}

input AccountRelateToManyForUpdateInput {
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input AuthenticationRetryUpdateArgs {
  where: AuthenticationRetryWhereUniqueInput!
  data: AuthenticationRetryUpdateInput!
}

input AuthenticationRetryCreateInput {
  account: AccountRelateToManyForCreateInput
  createdAt: DateTime
}

input AccountRelateToManyForCreateInput {
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

type Authentication {
  id: ID!
  account(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountCount(where: AccountWhereInput! = {}): Int
  createdAt: DateTime
  salt: String
  hash: String
}

input AuthenticationWhereUniqueInput {
  id: ID
}

input AuthenticationWhereInput {
  AND: [AuthenticationWhereInput!]
  OR: [AuthenticationWhereInput!]
  NOT: [AuthenticationWhereInput!]
  id: IDFilter
  account: AccountManyRelationFilter
  createdAt: DateTimeNullableFilter
  salt: StringFilter
  hash: StringFilter
}

input AuthenticationOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  salt: OrderDirection
  hash: OrderDirection
}

input AuthenticationUpdateInput {
  account: AccountRelateToManyForUpdateInput
  createdAt: DateTime
  salt: String
  hash: String
}

input AuthenticationUpdateArgs {
  where: AuthenticationWhereUniqueInput!
  data: AuthenticationUpdateInput!
}

input AuthenticationCreateInput {
  account: AccountRelateToManyForCreateInput
  createdAt: DateTime
  salt: String
  hash: String
}

type Business {
  id: ID!
  application: Application
  goodsOrServicesSupplied: String
  totalYearsExporting: Int
  totalEmployeesUK: Int
  estimatedAnnualTurnover: Int
  exportsTurnoverPercentage: Int
}

input BusinessWhereUniqueInput {
  id: ID
}

input BusinessWhereInput {
  AND: [BusinessWhereInput!]
  OR: [BusinessWhereInput!]
  NOT: [BusinessWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  goodsOrServicesSupplied: StringFilter
  totalYearsExporting: IntNullableFilter
  totalEmployeesUK: IntNullableFilter
  estimatedAnnualTurnover: IntNullableFilter
  exportsTurnoverPercentage: IntNullableFilter
}

input BusinessOrderByInput {
  id: OrderDirection
  goodsOrServicesSupplied: OrderDirection
  totalYearsExporting: OrderDirection
  totalEmployeesUK: OrderDirection
  estimatedAnnualTurnover: OrderDirection
  exportsTurnoverPercentage: OrderDirection
}

input BusinessUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  goodsOrServicesSupplied: String
  totalYearsExporting: Int
  totalEmployeesUK: Int
  estimatedAnnualTurnover: Int
  exportsTurnoverPercentage: Int
}

input BusinessUpdateArgs {
  where: BusinessWhereUniqueInput!
  data: BusinessUpdateInput!
}

input BusinessCreateInput {
  application: ApplicationRelateToOneForCreateInput
  goodsOrServicesSupplied: String
  totalYearsExporting: Int
  totalEmployeesUK: Int
  estimatedAnnualTurnover: Int
  exportsTurnoverPercentage: Int
}

type Broker {
  id: ID!
  application: Application
  isUsingBroker: Boolean
  name: String
  addressLine1: String
  addressLine2: String
  town: String
  county: String
  postcode: String
  email: String
}

input BrokerWhereUniqueInput {
  id: ID
}

input BrokerWhereInput {
  AND: [BrokerWhereInput!]
  OR: [BrokerWhereInput!]
  NOT: [BrokerWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  name: StringFilter
  addressLine1: StringFilter
  addressLine2: StringFilter
  town: StringFilter
  county: StringFilter
  postcode: StringFilter
  email: StringFilter
}

input BrokerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  addressLine1: OrderDirection
  addressLine2: OrderDirection
  town: OrderDirection
  county: OrderDirection
  postcode: OrderDirection
  email: OrderDirection
}

input BrokerUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  isUsingBroker: Boolean
  name: String
  addressLine1: String
  addressLine2: String
  town: String
  county: String
  postcode: String
  email: String
}

input BrokerUpdateArgs {
  where: BrokerWhereUniqueInput!
  data: BrokerUpdateInput!
}

input BrokerCreateInput {
  application: ApplicationRelateToOneForCreateInput
  isUsingBroker: Boolean
  name: String
  addressLine1: String
  addressLine2: String
  town: String
  county: String
  postcode: String
  email: String
}

type CompanyAddress {
  id: ID!
  company: Company
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

input CompanyAddressWhereUniqueInput {
  id: ID
}

input CompanyAddressWhereInput {
  AND: [CompanyAddressWhereInput!]
  OR: [CompanyAddressWhereInput!]
  NOT: [CompanyAddressWhereInput!]
  id: IDFilter
  company: CompanyWhereInput
  addressLine1: StringFilter
  addressLine2: StringFilter
  careOf: StringFilter
  locality: StringFilter
  region: StringFilter
  postalCode: StringFilter
  country: StringFilter
  premises: StringFilter
}

input CompanyAddressOrderByInput {
  id: OrderDirection
  addressLine1: OrderDirection
  addressLine2: OrderDirection
  careOf: OrderDirection
  locality: OrderDirection
  region: OrderDirection
  postalCode: OrderDirection
  country: OrderDirection
  premises: OrderDirection
}

input CompanyAddressUpdateInput {
  company: CompanyRelateToOneForUpdateInput
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

input CompanyAddressUpdateArgs {
  where: CompanyAddressWhereUniqueInput!
  data: CompanyAddressUpdateInput!
}

input CompanyAddressCreateInput {
  company: CompanyRelateToOneForCreateInput
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

type Company {
  id: ID!
  application: Application
  registeredOfficeAddress: CompanyAddress
  sicCodes(where: CompanySicCodeWhereInput! = {}, orderBy: [CompanySicCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanySicCodeWhereUniqueInput): [CompanySicCode!]
  sicCodesCount(where: CompanySicCodeWhereInput! = {}): Int
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasDifferentTradingAddress: Boolean
  alternativeTradingName: String
  hasDifferentTradingName: Boolean
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  registeredOfficeAddress: CompanyAddressWhereInput
  sicCodes: CompanySicCodeManyRelationFilter
  companyName: StringFilter
  companyNumber: StringFilter
  dateOfCreation: DateTimeNullableFilter
  alternativeTradingName: StringFilter
  companyWebsite: StringFilter
  phoneNumber: StringFilter
  financialYearEndDate: DateTimeNullableFilter
}

input CompanySicCodeManyRelationFilter {
  every: CompanySicCodeWhereInput
  some: CompanySicCodeWhereInput
  none: CompanySicCodeWhereInput
}

input CompanyOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
  companyNumber: OrderDirection
  dateOfCreation: OrderDirection
  alternativeTradingName: OrderDirection
  companyWebsite: OrderDirection
  phoneNumber: OrderDirection
  financialYearEndDate: OrderDirection
}

input CompanyUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  registeredOfficeAddress: CompanyAddressRelateToOneForUpdateInput
  sicCodes: CompanySicCodeRelateToManyForUpdateInput
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasDifferentTradingAddress: Boolean
  alternativeTradingName: String
  hasDifferentTradingName: Boolean
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
}

input CompanyAddressRelateToOneForUpdateInput {
  create: CompanyAddressCreateInput
  connect: CompanyAddressWhereUniqueInput
  disconnect: Boolean
}

input CompanySicCodeRelateToManyForUpdateInput {
  disconnect: [CompanySicCodeWhereUniqueInput!]
  set: [CompanySicCodeWhereUniqueInput!]
  create: [CompanySicCodeCreateInput!]
  connect: [CompanySicCodeWhereUniqueInput!]
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  application: ApplicationRelateToOneForCreateInput
  registeredOfficeAddress: CompanyAddressRelateToOneForCreateInput
  sicCodes: CompanySicCodeRelateToManyForCreateInput
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasDifferentTradingAddress: Boolean
  alternativeTradingName: String
  hasDifferentTradingName: Boolean
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
}

input CompanyAddressRelateToOneForCreateInput {
  create: CompanyAddressCreateInput
  connect: CompanyAddressWhereUniqueInput
}

input CompanySicCodeRelateToManyForCreateInput {
  create: [CompanySicCodeCreateInput!]
  connect: [CompanySicCodeWhereUniqueInput!]
}

type CompanySicCode {
  id: ID!
  company: Company
  sicCode: String
  industrySectorName: String
}

input CompanySicCodeWhereUniqueInput {
  id: ID
}

input CompanySicCodeWhereInput {
  AND: [CompanySicCodeWhereInput!]
  OR: [CompanySicCodeWhereInput!]
  NOT: [CompanySicCodeWhereInput!]
  id: IDFilter
  company: CompanyWhereInput
  sicCode: StringFilter
  industrySectorName: StringFilter
}

input CompanySicCodeOrderByInput {
  id: OrderDirection
  sicCode: OrderDirection
  industrySectorName: OrderDirection
}

input CompanySicCodeUpdateInput {
  company: CompanyRelateToOneForUpdateInput
  sicCode: String
  industrySectorName: String
}

input CompanySicCodeUpdateArgs {
  where: CompanySicCodeWhereUniqueInput!
  data: CompanySicCodeUpdateInput!
}

input CompanySicCodeCreateInput {
  company: CompanyRelateToOneForCreateInput
  sicCode: String
  industrySectorName: String
}

type Buyer {
  id: ID!
  application: Application
  companyOrOrganisationName: String
  address: String
  country: Country
  registrationNumber: String
  website: String
  contactFirstName: String
  contactLastName: String
  contactPosition: String
  contactEmail: String
  canContactBuyer: Boolean
  exporterIsConnectedWithBuyer: Boolean
  exporterHasTradedWithBuyer: Boolean
}

input BuyerWhereUniqueInput {
  id: ID
}

input BuyerWhereInput {
  AND: [BuyerWhereInput!]
  OR: [BuyerWhereInput!]
  NOT: [BuyerWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  companyOrOrganisationName: StringFilter
  address: StringFilter
  country: CountryWhereInput
  registrationNumber: StringFilter
  website: StringFilter
  contactFirstName: StringFilter
  contactLastName: StringFilter
  contactPosition: StringFilter
  contactEmail: StringFilter
}

input BuyerOrderByInput {
  id: OrderDirection
  companyOrOrganisationName: OrderDirection
  address: OrderDirection
  registrationNumber: OrderDirection
  website: OrderDirection
  contactFirstName: OrderDirection
  contactLastName: OrderDirection
  contactPosition: OrderDirection
  contactEmail: OrderDirection
}

input BuyerUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  companyOrOrganisationName: String
  address: String
  country: CountryRelateToOneForUpdateInput
  registrationNumber: String
  website: String
  contactFirstName: String
  contactLastName: String
  contactPosition: String
  contactEmail: String
  canContactBuyer: Boolean
  exporterIsConnectedWithBuyer: Boolean
  exporterHasTradedWithBuyer: Boolean
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input BuyerUpdateArgs {
  where: BuyerWhereUniqueInput!
  data: BuyerUpdateInput!
}

input BuyerCreateInput {
  application: ApplicationRelateToOneForCreateInput
  companyOrOrganisationName: String
  address: String
  country: CountryRelateToOneForCreateInput
  registrationNumber: String
  website: String
  contactFirstName: String
  contactLastName: String
  contactPosition: String
  contactEmail: String
  canContactBuyer: Boolean
  exporterIsConnectedWithBuyer: Boolean
  exporterHasTradedWithBuyer: Boolean
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

type Country {
  id: ID!
  isoCode: String
  name: String
}

input CountryWhereUniqueInput {
  id: ID
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  isoCode: StringFilter
  name: StringFilter
}

input CountryOrderByInput {
  id: OrderDirection
  isoCode: OrderDirection
  name: OrderDirection
}

input CountryUpdateInput {
  isoCode: String
  name: String
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  isoCode: String
  name: String
}

type Eligibility {
  id: ID!
  application: Application
  buyerCountry: Country
  coverPeriod: CoverPeriod
  hasEndBuyer: Boolean
  hasMinimumUkGoodsOrServices: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  totalContractValue: TotalContractValue
  validExporterLocation: Boolean
}

input EligibilityWhereUniqueInput {
  id: ID
}

input EligibilityWhereInput {
  AND: [EligibilityWhereInput!]
  OR: [EligibilityWhereInput!]
  NOT: [EligibilityWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  buyerCountry: CountryWhereInput
  coverPeriod: CoverPeriodWhereInput
  hasEndBuyer: BooleanFilter
  hasMinimumUkGoodsOrServices: BooleanFilter
  hasCompaniesHouseNumber: BooleanFilter
  otherPartiesInvolved: BooleanFilter
  paidByLetterOfCredit: BooleanFilter
  totalContractValue: TotalContractValueWhereInput
  validExporterLocation: BooleanFilter
}

input EligibilityOrderByInput {
  id: OrderDirection
  hasEndBuyer: OrderDirection
  hasMinimumUkGoodsOrServices: OrderDirection
  hasCompaniesHouseNumber: OrderDirection
  otherPartiesInvolved: OrderDirection
  paidByLetterOfCredit: OrderDirection
  validExporterLocation: OrderDirection
}

input EligibilityUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  buyerCountry: CountryRelateToOneForUpdateInput
  coverPeriod: CoverPeriodRelateToOneForUpdateInput
  hasEndBuyer: Boolean
  hasMinimumUkGoodsOrServices: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  totalContractValue: TotalContractValueRelateToOneForUpdateInput
  validExporterLocation: Boolean
}

input CoverPeriodRelateToOneForUpdateInput {
  create: CoverPeriodCreateInput
  connect: CoverPeriodWhereUniqueInput
  disconnect: Boolean
}

input TotalContractValueRelateToOneForUpdateInput {
  create: TotalContractValueCreateInput
  connect: TotalContractValueWhereUniqueInput
  disconnect: Boolean
}

input EligibilityUpdateArgs {
  where: EligibilityWhereUniqueInput!
  data: EligibilityUpdateInput!
}

input EligibilityCreateInput {
  application: ApplicationRelateToOneForCreateInput
  buyerCountry: CountryRelateToOneForCreateInput
  coverPeriod: CoverPeriodRelateToOneForCreateInput
  hasEndBuyer: Boolean
  hasMinimumUkGoodsOrServices: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  totalContractValue: TotalContractValueRelateToOneForCreateInput
  validExporterLocation: Boolean
}

input CoverPeriodRelateToOneForCreateInput {
  create: CoverPeriodCreateInput
  connect: CoverPeriodWhereUniqueInput
}

input TotalContractValueRelateToOneForCreateInput {
  create: TotalContractValueCreateInput
  connect: TotalContractValueWhereUniqueInput
}

type SectionReview {
  id: ID!
  application: Application
  eligibility: Boolean
  policy: Boolean
  business: Boolean
  buyer: Boolean
}

input SectionReviewWhereUniqueInput {
  id: ID
}

input SectionReviewWhereInput {
  AND: [SectionReviewWhereInput!]
  OR: [SectionReviewWhereInput!]
  NOT: [SectionReviewWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
}

input SectionReviewOrderByInput {
  id: OrderDirection
}

input SectionReviewUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  eligibility: Boolean
  policy: Boolean
  business: Boolean
  buyer: Boolean
}

input SectionReviewUpdateArgs {
  where: SectionReviewWhereUniqueInput!
  data: SectionReviewUpdateInput!
}

input SectionReviewCreateInput {
  application: ApplicationRelateToOneForCreateInput
  eligibility: Boolean
  policy: Boolean
  business: Boolean
  buyer: Boolean
}

type Declaration {
  id: ID!
  application: Application
  antiBribery: DeclarationAntiBribery
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgement
  howDataWillBeUsed: DeclarationHowDataWillBeUsed
  agreeToConfidentiality: Boolean
  agreeToAntiBribery: Boolean
  hasAntiBriberyCodeOfConduct: Boolean
  willExportWithAntiBriberyCodeOfConduct: Boolean
  agreeToConfirmationAndAcknowledgements: Boolean
  agreeHowDataWillBeUsed: Boolean
}

input DeclarationWhereUniqueInput {
  id: ID
}

input DeclarationWhereInput {
  AND: [DeclarationWhereInput!]
  OR: [DeclarationWhereInput!]
  NOT: [DeclarationWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  antiBribery: DeclarationAntiBriberyWhereInput
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgementWhereInput
  howDataWillBeUsed: DeclarationHowDataWillBeUsedWhereInput
}

input DeclarationOrderByInput {
  id: OrderDirection
}

input DeclarationUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  antiBribery: DeclarationAntiBriberyRelateToOneForUpdateInput
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgementRelateToOneForUpdateInput
  howDataWillBeUsed: DeclarationHowDataWillBeUsedRelateToOneForUpdateInput
  agreeToConfidentiality: Boolean
  agreeToAntiBribery: Boolean
  hasAntiBriberyCodeOfConduct: Boolean
  willExportWithAntiBriberyCodeOfConduct: Boolean
  agreeToConfirmationAndAcknowledgements: Boolean
  agreeHowDataWillBeUsed: Boolean
}

input DeclarationAntiBriberyRelateToOneForUpdateInput {
  create: DeclarationAntiBriberyCreateInput
  connect: DeclarationAntiBriberyWhereUniqueInput
  disconnect: Boolean
}

input DeclarationConfirmationAndAcknowledgementRelateToOneForUpdateInput {
  create: DeclarationConfirmationAndAcknowledgementCreateInput
  connect: DeclarationConfirmationAndAcknowledgementWhereUniqueInput
  disconnect: Boolean
}

input DeclarationHowDataWillBeUsedRelateToOneForUpdateInput {
  create: DeclarationHowDataWillBeUsedCreateInput
  connect: DeclarationHowDataWillBeUsedWhereUniqueInput
  disconnect: Boolean
}

input DeclarationUpdateArgs {
  where: DeclarationWhereUniqueInput!
  data: DeclarationUpdateInput!
}

input DeclarationCreateInput {
  application: ApplicationRelateToOneForCreateInput
  antiBribery: DeclarationAntiBriberyRelateToOneForCreateInput
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgementRelateToOneForCreateInput
  howDataWillBeUsed: DeclarationHowDataWillBeUsedRelateToOneForCreateInput
  agreeToConfidentiality: Boolean
  agreeToAntiBribery: Boolean
  hasAntiBriberyCodeOfConduct: Boolean
  willExportWithAntiBriberyCodeOfConduct: Boolean
  agreeToConfirmationAndAcknowledgements: Boolean
  agreeHowDataWillBeUsed: Boolean
}

input DeclarationAntiBriberyRelateToOneForCreateInput {
  create: DeclarationAntiBriberyCreateInput
  connect: DeclarationAntiBriberyWhereUniqueInput
}

input DeclarationConfirmationAndAcknowledgementRelateToOneForCreateInput {
  create: DeclarationConfirmationAndAcknowledgementCreateInput
  connect: DeclarationConfirmationAndAcknowledgementWhereUniqueInput
}

input DeclarationHowDataWillBeUsedRelateToOneForCreateInput {
  create: DeclarationHowDataWillBeUsedCreateInput
  connect: DeclarationHowDataWillBeUsedWhereUniqueInput
}

type DeclarationAntiBribery {
  id: ID!
  version: String
  content: DeclarationAntiBribery_content_Document
}

type DeclarationAntiBribery_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeclarationAntiBriberyWhereUniqueInput {
  id: ID
}

input DeclarationAntiBriberyWhereInput {
  AND: [DeclarationAntiBriberyWhereInput!]
  OR: [DeclarationAntiBriberyWhereInput!]
  NOT: [DeclarationAntiBriberyWhereInput!]
  id: IDFilter
  version: StringFilter
}

input DeclarationAntiBriberyOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input DeclarationAntiBriberyUpdateInput {
  version: String
  content: JSON
}

input DeclarationAntiBriberyUpdateArgs {
  where: DeclarationAntiBriberyWhereUniqueInput!
  data: DeclarationAntiBriberyUpdateInput!
}

input DeclarationAntiBriberyCreateInput {
  version: String
  content: JSON
}

type DeclarationConfirmationAndAcknowledgement {
  id: ID!
  version: String
  content: DeclarationConfirmationAndAcknowledgement_content_Document
}

type DeclarationConfirmationAndAcknowledgement_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeclarationConfirmationAndAcknowledgementWhereUniqueInput {
  id: ID
}

input DeclarationConfirmationAndAcknowledgementWhereInput {
  AND: [DeclarationConfirmationAndAcknowledgementWhereInput!]
  OR: [DeclarationConfirmationAndAcknowledgementWhereInput!]
  NOT: [DeclarationConfirmationAndAcknowledgementWhereInput!]
  id: IDFilter
  version: StringFilter
}

input DeclarationConfirmationAndAcknowledgementOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input DeclarationConfirmationAndAcknowledgementUpdateInput {
  version: String
  content: JSON
}

input DeclarationConfirmationAndAcknowledgementUpdateArgs {
  where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!
  data: DeclarationConfirmationAndAcknowledgementUpdateInput!
}

input DeclarationConfirmationAndAcknowledgementCreateInput {
  version: String
  content: JSON
}

type DeclarationHowDataWillBeUsed {
  id: ID!
  version: String
  content: DeclarationHowDataWillBeUsed_content_Document
}

type DeclarationHowDataWillBeUsed_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeclarationHowDataWillBeUsedWhereUniqueInput {
  id: ID
}

input DeclarationHowDataWillBeUsedWhereInput {
  AND: [DeclarationHowDataWillBeUsedWhereInput!]
  OR: [DeclarationHowDataWillBeUsedWhereInput!]
  NOT: [DeclarationHowDataWillBeUsedWhereInput!]
  id: IDFilter
  version: StringFilter
}

input DeclarationHowDataWillBeUsedOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input DeclarationHowDataWillBeUsedUpdateInput {
  version: String
  content: JSON
}

input DeclarationHowDataWillBeUsedUpdateArgs {
  where: DeclarationHowDataWillBeUsedWhereUniqueInput!
  data: DeclarationHowDataWillBeUsedUpdateInput!
}

input DeclarationHowDataWillBeUsedCreateInput {
  version: String
  content: JSON
}

type Page {
  id: ID!
  heading: String
  metaTitle: String
  content: Page_content_Document
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  heading: StringFilter
  metaTitle: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  heading: OrderDirection
  metaTitle: OrderDirection
}

input PageUpdateInput {
  heading: String
  metaTitle: String
  content: JSON
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  heading: String
  metaTitle: String
  content: JSON
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Feedback {
  id: ID!
  service: String
  satisfaction: String
  improvement: String
  otherComments: String
  referralUrl: String
  product: String
  createdAt: DateTime
}

input FeedbackWhereUniqueInput {
  id: ID
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  id: IDFilter
  service: StringFilter
  satisfaction: StringNullableFilter
  improvement: StringFilter
  otherComments: StringFilter
  referralUrl: StringFilter
  product: StringFilter
  createdAt: DateTimeNullableFilter
}

input FeedbackOrderByInput {
  id: OrderDirection
  service: OrderDirection
  satisfaction: OrderDirection
  improvement: OrderDirection
  otherComments: OrderDirection
  referralUrl: OrderDirection
  product: OrderDirection
  createdAt: OrderDirection
}

input FeedbackUpdateInput {
  service: String
  satisfaction: String
  improvement: String
  otherComments: String
  referralUrl: String
  product: String
  createdAt: DateTime
}

input FeedbackUpdateArgs {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateInput!
}

input FeedbackCreateInput {
  service: String
  satisfaction: String
  improvement: String
  otherComments: String
  referralUrl: String
  product: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createReferenceNumber(data: ReferenceNumberCreateInput!): ReferenceNumber
  createReferenceNumbers(data: [ReferenceNumberCreateInput!]!): [ReferenceNumber]
  updateReferenceNumber(where: ReferenceNumberWhereUniqueInput!, data: ReferenceNumberUpdateInput!): ReferenceNumber
  updateReferenceNumbers(data: [ReferenceNumberUpdateArgs!]!): [ReferenceNumber]
  deleteReferenceNumber(where: ReferenceNumberWhereUniqueInput!): ReferenceNumber
  deleteReferenceNumbers(where: [ReferenceNumberWhereUniqueInput!]!): [ReferenceNumber]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(where: ApplicationWhereUniqueInput!, data: ApplicationUpdateInput!): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createTotalContractValue(data: TotalContractValueCreateInput!): TotalContractValue
  createTotalContractValues(data: [TotalContractValueCreateInput!]!): [TotalContractValue]
  updateTotalContractValue(where: TotalContractValueWhereUniqueInput!, data: TotalContractValueUpdateInput!): TotalContractValue
  updateTotalContractValues(data: [TotalContractValueUpdateArgs!]!): [TotalContractValue]
  deleteTotalContractValue(where: TotalContractValueWhereUniqueInput!): TotalContractValue
  deleteTotalContractValues(where: [TotalContractValueWhereUniqueInput!]!): [TotalContractValue]
  createCoverPeriod(data: CoverPeriodCreateInput!): CoverPeriod
  createCoverPeriods(data: [CoverPeriodCreateInput!]!): [CoverPeriod]
  updateCoverPeriod(where: CoverPeriodWhereUniqueInput!, data: CoverPeriodUpdateInput!): CoverPeriod
  updateCoverPeriods(data: [CoverPeriodUpdateArgs!]!): [CoverPeriod]
  deleteCoverPeriod(where: CoverPeriodWhereUniqueInput!): CoverPeriod
  deleteCoverPeriods(where: [CoverPeriodWhereUniqueInput!]!): [CoverPeriod]
  createPolicy(data: PolicyCreateInput!): Policy
  createPolicies(data: [PolicyCreateInput!]!): [Policy]
  updatePolicy(where: PolicyWhereUniqueInput!, data: PolicyUpdateInput!): Policy
  updatePolicies(data: [PolicyUpdateArgs!]!): [Policy]
  deletePolicy(where: PolicyWhereUniqueInput!): Policy
  deletePolicies(where: [PolicyWhereUniqueInput!]!): [Policy]
  createPolicyContact(data: PolicyContactCreateInput!): PolicyContact
  createPolicyContacts(data: [PolicyContactCreateInput!]!): [PolicyContact]
  updatePolicyContact(where: PolicyContactWhereUniqueInput!, data: PolicyContactUpdateInput!): PolicyContact
  updatePolicyContacts(data: [PolicyContactUpdateArgs!]!): [PolicyContact]
  deletePolicyContact(where: PolicyContactWhereUniqueInput!): PolicyContact
  deletePolicyContacts(where: [PolicyContactWhereUniqueInput!]!): [PolicyContact]
  createExportContract(data: ExportContractCreateInput!): ExportContract
  createExportContracts(data: [ExportContractCreateInput!]!): [ExportContract]
  updateExportContract(where: ExportContractWhereUniqueInput!, data: ExportContractUpdateInput!): ExportContract
  updateExportContracts(data: [ExportContractUpdateArgs!]!): [ExportContract]
  deleteExportContract(where: ExportContractWhereUniqueInput!): ExportContract
  deleteExportContracts(where: [ExportContractWhereUniqueInput!]!): [ExportContract]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createAuthenticationRetry(data: AuthenticationRetryCreateInput!): AuthenticationRetry
  createAuthenticationRetries(data: [AuthenticationRetryCreateInput!]!): [AuthenticationRetry]
  updateAuthenticationRetry(where: AuthenticationRetryWhereUniqueInput!, data: AuthenticationRetryUpdateInput!): AuthenticationRetry
  updateAuthenticationRetries(data: [AuthenticationRetryUpdateArgs!]!): [AuthenticationRetry]
  deleteAuthenticationRetry(where: AuthenticationRetryWhereUniqueInput!): AuthenticationRetry
  deleteAuthenticationRetries(where: [AuthenticationRetryWhereUniqueInput!]!): [AuthenticationRetry]
  createAuthentication(data: AuthenticationCreateInput!): Authentication
  createAuthentications(data: [AuthenticationCreateInput!]!): [Authentication]
  updateAuthentication(where: AuthenticationWhereUniqueInput!, data: AuthenticationUpdateInput!): Authentication
  updateAuthentications(data: [AuthenticationUpdateArgs!]!): [Authentication]
  deleteAuthentication(where: AuthenticationWhereUniqueInput!): Authentication
  deleteAuthentications(where: [AuthenticationWhereUniqueInput!]!): [Authentication]
  createBusiness(data: BusinessCreateInput!): Business
  createBusinesses(data: [BusinessCreateInput!]!): [Business]
  updateBusiness(where: BusinessWhereUniqueInput!, data: BusinessUpdateInput!): Business
  updateBusinesses(data: [BusinessUpdateArgs!]!): [Business]
  deleteBusiness(where: BusinessWhereUniqueInput!): Business
  deleteBusinesses(where: [BusinessWhereUniqueInput!]!): [Business]
  createBroker(data: BrokerCreateInput!): Broker
  createBrokers(data: [BrokerCreateInput!]!): [Broker]
  updateBroker(where: BrokerWhereUniqueInput!, data: BrokerUpdateInput!): Broker
  updateBrokers(data: [BrokerUpdateArgs!]!): [Broker]
  deleteBroker(where: BrokerWhereUniqueInput!): Broker
  deleteBrokers(where: [BrokerWhereUniqueInput!]!): [Broker]
  createCompanyAddress(data: CompanyAddressCreateInput!): CompanyAddress
  createCompanyAddresses(data: [CompanyAddressCreateInput!]!): [CompanyAddress]
  updateCompanyAddress(where: CompanyAddressWhereUniqueInput!, data: CompanyAddressUpdateInput!): CompanyAddress
  updateCompanyAddresses(data: [CompanyAddressUpdateArgs!]!): [CompanyAddress]
  deleteCompanyAddress(where: CompanyAddressWhereUniqueInput!): CompanyAddress
  deleteCompanyAddresses(where: [CompanyAddressWhereUniqueInput!]!): [CompanyAddress]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createCompanySicCode(data: CompanySicCodeCreateInput!): CompanySicCode
  createCompanySicCodes(data: [CompanySicCodeCreateInput!]!): [CompanySicCode]
  updateCompanySicCode(where: CompanySicCodeWhereUniqueInput!, data: CompanySicCodeUpdateInput!): CompanySicCode
  updateCompanySicCodes(data: [CompanySicCodeUpdateArgs!]!): [CompanySicCode]
  deleteCompanySicCode(where: CompanySicCodeWhereUniqueInput!): CompanySicCode
  deleteCompanySicCodes(where: [CompanySicCodeWhereUniqueInput!]!): [CompanySicCode]
  createBuyer(data: BuyerCreateInput!): Buyer
  createBuyers(data: [BuyerCreateInput!]!): [Buyer]
  updateBuyer(where: BuyerWhereUniqueInput!, data: BuyerUpdateInput!): Buyer
  updateBuyers(data: [BuyerUpdateArgs!]!): [Buyer]
  deleteBuyer(where: BuyerWhereUniqueInput!): Buyer
  deleteBuyers(where: [BuyerWhereUniqueInput!]!): [Buyer]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(where: CountryWhereUniqueInput!, data: CountryUpdateInput!): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createEligibility(data: EligibilityCreateInput!): Eligibility
  createEligibilities(data: [EligibilityCreateInput!]!): [Eligibility]
  updateEligibility(where: EligibilityWhereUniqueInput!, data: EligibilityUpdateInput!): Eligibility
  updateEligibilities(data: [EligibilityUpdateArgs!]!): [Eligibility]
  deleteEligibility(where: EligibilityWhereUniqueInput!): Eligibility
  deleteEligibilities(where: [EligibilityWhereUniqueInput!]!): [Eligibility]
  createSectionReview(data: SectionReviewCreateInput!): SectionReview
  createSectionReviews(data: [SectionReviewCreateInput!]!): [SectionReview]
  updateSectionReview(where: SectionReviewWhereUniqueInput!, data: SectionReviewUpdateInput!): SectionReview
  updateSectionReviews(data: [SectionReviewUpdateArgs!]!): [SectionReview]
  deleteSectionReview(where: SectionReviewWhereUniqueInput!): SectionReview
  deleteSectionReviews(where: [SectionReviewWhereUniqueInput!]!): [SectionReview]
  createDeclaration(data: DeclarationCreateInput!): Declaration
  createDeclarations(data: [DeclarationCreateInput!]!): [Declaration]
  updateDeclaration(where: DeclarationWhereUniqueInput!, data: DeclarationUpdateInput!): Declaration
  updateDeclarations(data: [DeclarationUpdateArgs!]!): [Declaration]
  deleteDeclaration(where: DeclarationWhereUniqueInput!): Declaration
  deleteDeclarations(where: [DeclarationWhereUniqueInput!]!): [Declaration]
  createDeclarationAntiBribery(data: DeclarationAntiBriberyCreateInput!): DeclarationAntiBribery
  createDeclarationAntiBriberies(data: [DeclarationAntiBriberyCreateInput!]!): [DeclarationAntiBribery]
  updateDeclarationAntiBribery(where: DeclarationAntiBriberyWhereUniqueInput!, data: DeclarationAntiBriberyUpdateInput!): DeclarationAntiBribery
  updateDeclarationAntiBriberies(data: [DeclarationAntiBriberyUpdateArgs!]!): [DeclarationAntiBribery]
  deleteDeclarationAntiBribery(where: DeclarationAntiBriberyWhereUniqueInput!): DeclarationAntiBribery
  deleteDeclarationAntiBriberies(where: [DeclarationAntiBriberyWhereUniqueInput!]!): [DeclarationAntiBribery]
  createDeclarationConfirmationAndAcknowledgement(data: DeclarationConfirmationAndAcknowledgementCreateInput!): DeclarationConfirmationAndAcknowledgement
  createDeclarationConfirmationAndAcknowledgements(data: [DeclarationConfirmationAndAcknowledgementCreateInput!]!): [DeclarationConfirmationAndAcknowledgement]
  updateDeclarationConfirmationAndAcknowledgement(where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!, data: DeclarationConfirmationAndAcknowledgementUpdateInput!): DeclarationConfirmationAndAcknowledgement
  updateDeclarationConfirmationAndAcknowledgements(data: [DeclarationConfirmationAndAcknowledgementUpdateArgs!]!): [DeclarationConfirmationAndAcknowledgement]
  deleteDeclarationConfirmationAndAcknowledgement(where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!): DeclarationConfirmationAndAcknowledgement
  deleteDeclarationConfirmationAndAcknowledgements(where: [DeclarationConfirmationAndAcknowledgementWhereUniqueInput!]!): [DeclarationConfirmationAndAcknowledgement]
  createDeclarationHowDataWillBeUsed(data: DeclarationHowDataWillBeUsedCreateInput!): DeclarationHowDataWillBeUsed
  createDeclarationHowDataWillBeUseds(data: [DeclarationHowDataWillBeUsedCreateInput!]!): [DeclarationHowDataWillBeUsed]
  updateDeclarationHowDataWillBeUsed(where: DeclarationHowDataWillBeUsedWhereUniqueInput!, data: DeclarationHowDataWillBeUsedUpdateInput!): DeclarationHowDataWillBeUsed
  updateDeclarationHowDataWillBeUseds(data: [DeclarationHowDataWillBeUsedUpdateArgs!]!): [DeclarationHowDataWillBeUsed]
  deleteDeclarationHowDataWillBeUsed(where: DeclarationHowDataWillBeUsedWhereUniqueInput!): DeclarationHowDataWillBeUsed
  deleteDeclarationHowDataWillBeUseds(where: [DeclarationHowDataWillBeUsedWhereUniqueInput!]!): [DeclarationHowDataWillBeUsed]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFeedback(data: FeedbackCreateInput!): Feedback
  createFeedbacks(data: [FeedbackCreateInput!]!): [Feedback]
  updateFeedback(where: FeedbackWhereUniqueInput!, data: FeedbackUpdateInput!): Feedback
  updateFeedbacks(data: [FeedbackUpdateArgs!]!): [Feedback]
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteFeedbacks(where: [FeedbackWhereUniqueInput!]!): [Feedback]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!

  """ create an account """
  createAnAccount(urlOrigin: String!, firstName: String!, lastName: String!, email: String!, password: String!): CreateAnAccountResponse

  """ create an application """
  createAnApplication(accountId: String!, eligibilityAnswers: ApplicationEligibility!, company: CompanyInput!): CreateAnApplicationResponse

  """ delete an account """
  deleteAnAccount(email: String!): SuccessResponse

  """ verify an account's email address """
  verifyAccountEmailAddress(token: String!, id: String!): VerifyAccountEmailAddressResponse

  """ verify an account's reactivation token """
  verifyAccountReactivationToken(token: String!): VerifyAccountReactivationTokenResponse

  """ send confirm email address email """
  sendEmailConfirmEmailAddress(urlOrigin: String!, accountId: String!): EmailResponse

  """ validate credentials, generate and email a OTP security code """
  accountSignIn(urlOrigin: String!, email: String!, password: String!): AccountSignInResponse

  """ generate and email a new OTP security code """
  accountSignInSendNewCode(accountId: String!): AccountSignInResponse

  """ verify an account's OTP security code """
  verifyAccountSignInCode(accountId: String!, securityCode: String!): AccountSignInResponse

  """ add an OTP security code to an account and return"""
  addAndGetOTP(email: String!): AddAndGetOtpResponse

  """ send email with password reset link """
  sendEmailPasswordResetLink(urlOrigin: String!, email: String!): AccountSendEmailPasswordResetLinkResponse

  """ send email with reactivate account link """
  sendEmailReactivateAccountLink(urlOrigin: String!, accountId: String!): AccountSendEmailReactivateAccountLinkResponse

  """ reset account password """
  accountPasswordReset(token: String!, password: String!, hasBeenUsedBefore: Boolean): AccountPasswordResetResponse

  """ delete an application by reference number """
  deleteApplicationByReferenceNumber(referenceNumber: Int!): SuccessResponse

  """ submit an application """
  submitApplication(applicationId: String!): SuccessResponse

  """ create and send email for insurance feedback """
  createFeedbackAndSendEmail(satisfaction: String, improvement: String, otherComments: String, referralUrl: String, product: String, service: String): SuccessResponse
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  referenceNumbers(where: ReferenceNumberWhereInput! = {}, orderBy: [ReferenceNumberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReferenceNumberWhereUniqueInput): [ReferenceNumber!]
  referenceNumber(where: ReferenceNumberWhereUniqueInput!): ReferenceNumber
  referenceNumbersCount(where: ReferenceNumberWhereInput! = {}): Int
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  application(where: ApplicationWhereUniqueInput!): Application
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  totalContractValues(where: TotalContractValueWhereInput! = {}, orderBy: [TotalContractValueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TotalContractValueWhereUniqueInput): [TotalContractValue!]
  totalContractValue(where: TotalContractValueWhereUniqueInput!): TotalContractValue
  totalContractValuesCount(where: TotalContractValueWhereInput! = {}): Int
  coverPeriods(where: CoverPeriodWhereInput! = {}, orderBy: [CoverPeriodOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CoverPeriodWhereUniqueInput): [CoverPeriod!]
  coverPeriod(where: CoverPeriodWhereUniqueInput!): CoverPeriod
  coverPeriodsCount(where: CoverPeriodWhereInput! = {}): Int
  policies(where: PolicyWhereInput! = {}, orderBy: [PolicyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PolicyWhereUniqueInput): [Policy!]
  policy(where: PolicyWhereUniqueInput!): Policy
  policiesCount(where: PolicyWhereInput! = {}): Int
  policyContacts(where: PolicyContactWhereInput! = {}, orderBy: [PolicyContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PolicyContactWhereUniqueInput): [PolicyContact!]
  policyContact(where: PolicyContactWhereUniqueInput!): PolicyContact
  policyContactsCount(where: PolicyContactWhereInput! = {}): Int
  exportContracts(where: ExportContractWhereInput! = {}, orderBy: [ExportContractOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExportContractWhereUniqueInput): [ExportContract!]
  exportContract(where: ExportContractWhereUniqueInput!): ExportContract
  exportContractsCount(where: ExportContractWhereInput! = {}): Int
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  account(where: AccountWhereUniqueInput!): Account
  accountsCount(where: AccountWhereInput! = {}): Int
  authenticationRetries(where: AuthenticationRetryWhereInput! = {}, orderBy: [AuthenticationRetryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthenticationRetryWhereUniqueInput): [AuthenticationRetry!]
  authenticationRetry(where: AuthenticationRetryWhereUniqueInput!): AuthenticationRetry
  authenticationRetriesCount(where: AuthenticationRetryWhereInput! = {}): Int
  authentications(where: AuthenticationWhereInput! = {}, orderBy: [AuthenticationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthenticationWhereUniqueInput): [Authentication!]
  authentication(where: AuthenticationWhereUniqueInput!): Authentication
  authenticationsCount(where: AuthenticationWhereInput! = {}): Int
  businesses(where: BusinessWhereInput! = {}, orderBy: [BusinessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusinessWhereUniqueInput): [Business!]
  business(where: BusinessWhereUniqueInput!): Business
  businessesCount(where: BusinessWhereInput! = {}): Int
  brokers(where: BrokerWhereInput! = {}, orderBy: [BrokerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrokerWhereUniqueInput): [Broker!]
  broker(where: BrokerWhereUniqueInput!): Broker
  brokersCount(where: BrokerWhereInput! = {}): Int
  companyAddresses(where: CompanyAddressWhereInput! = {}, orderBy: [CompanyAddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyAddressWhereUniqueInput): [CompanyAddress!]
  companyAddress(where: CompanyAddressWhereUniqueInput!): CompanyAddress
  companyAddressesCount(where: CompanyAddressWhereInput! = {}): Int
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  companySicCodes(where: CompanySicCodeWhereInput! = {}, orderBy: [CompanySicCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanySicCodeWhereUniqueInput): [CompanySicCode!]
  companySicCode(where: CompanySicCodeWhereUniqueInput!): CompanySicCode
  companySicCodesCount(where: CompanySicCodeWhereInput! = {}): Int
  buyers(where: BuyerWhereInput! = {}, orderBy: [BuyerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuyerWhereUniqueInput): [Buyer!]
  buyer(where: BuyerWhereUniqueInput!): Buyer
  buyersCount(where: BuyerWhereInput! = {}): Int
  countries(where: CountryWhereInput! = {}, orderBy: [CountryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CountryWhereUniqueInput): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  eligibilities(where: EligibilityWhereInput! = {}, orderBy: [EligibilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EligibilityWhereUniqueInput): [Eligibility!]
  eligibility(where: EligibilityWhereUniqueInput!): Eligibility
  eligibilitiesCount(where: EligibilityWhereInput! = {}): Int
  sectionReviews(where: SectionReviewWhereInput! = {}, orderBy: [SectionReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionReviewWhereUniqueInput): [SectionReview!]
  sectionReview(where: SectionReviewWhereUniqueInput!): SectionReview
  sectionReviewsCount(where: SectionReviewWhereInput! = {}): Int
  declarations(where: DeclarationWhereInput! = {}, orderBy: [DeclarationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationWhereUniqueInput): [Declaration!]
  declaration(where: DeclarationWhereUniqueInput!): Declaration
  declarationsCount(where: DeclarationWhereInput! = {}): Int
  declarationAntiBriberies(where: DeclarationAntiBriberyWhereInput! = {}, orderBy: [DeclarationAntiBriberyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationAntiBriberyWhereUniqueInput): [DeclarationAntiBribery!]
  declarationAntiBribery(where: DeclarationAntiBriberyWhereUniqueInput!): DeclarationAntiBribery
  declarationAntiBriberiesCount(where: DeclarationAntiBriberyWhereInput! = {}): Int
  declarationConfirmationAndAcknowledgements(where: DeclarationConfirmationAndAcknowledgementWhereInput! = {}, orderBy: [DeclarationConfirmationAndAcknowledgementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationConfirmationAndAcknowledgementWhereUniqueInput): [DeclarationConfirmationAndAcknowledgement!]
  declarationConfirmationAndAcknowledgement(where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!): DeclarationConfirmationAndAcknowledgement
  declarationConfirmationAndAcknowledgementsCount(where: DeclarationConfirmationAndAcknowledgementWhereInput! = {}): Int
  declarationHowDataWillBeUseds(where: DeclarationHowDataWillBeUsedWhereInput! = {}, orderBy: [DeclarationHowDataWillBeUsedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationHowDataWillBeUsedWhereUniqueInput): [DeclarationHowDataWillBeUsed!]
  declarationHowDataWillBeUsed(where: DeclarationHowDataWillBeUsedWhereUniqueInput!): DeclarationHowDataWillBeUsed
  declarationHowDataWillBeUsedsCount(where: DeclarationHowDataWillBeUsedWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  feedbacks(where: FeedbackWhereInput! = {}, orderBy: [FeedbackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackWhereUniqueInput): [Feedback!]
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacksCount(where: FeedbackWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem

  """ get an account by email """
  getAccountByEmail(email: String!): AccountResponse

  """ get an account's password reset token """
  getAccountPasswordResetToken(email: String!): AccountPasswordResetTokenResponse

  """ verify an account's password reset token """
  verifyAccountPasswordResetToken(token: String!): AccountPasswordResetTokenResponse

  """ get CIS countries from APIM """
  getApimCisCountries: [MappedCisCountry]

  """ get companies house information """
  getCompaniesHouseInformation(companiesHouseNumber: String!): CompaniesHouseResponse

  """ get Ordnance Survey address """
  getOrdnanceSurveyAddress(postcode: String!, houseNameOrNumber: String!): OrdnanceSurveyResponse
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type AccountResponse {
  id: String
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
}

input AccountInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type CreateAnAccountResponse {
  success: Boolean
  id: String
  firstName: String
  lastName: String
  email: String
  verificationHash: String
}

type CompaniesHouseResponse {
  companyName: String
  registeredOfficeAddress: CompanyAddress
  companyNumber: String
  dateOfCreation: String
  sicCodes: [String]
  industrySectorNames: [String]
  financialYearEndDate: DateTime
  success: Boolean
  apiError: Boolean
  isActive: Boolean
  notFound: Boolean
}

type OrdnanceSurveyAddress {
  addressLine1: String
  addressLine2: String
  postalCode: String
  country: String
  county: String
  town: String
}

input OrdnanceAddressInput {
  addressLine1: String
  addressLine2: String
  postalCode: String
  country: String
  county: String
  town: String
}

input OldSicCodes {
  id: String
}

input CompanyAddressInput {
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

input CompanyInput {
  companyName: String
  companyNumber: String
  dateOfCreation: String
  sicCodes: [String]
  industrySectorNames: [String]
  financialYearEndDate: DateTime
  registeredOfficeAddress: CompanyAddressInput
  isActive: Boolean
}

type OrdnanceSurveyResponse {
  success: Boolean
  addresses: [OrdnanceSurveyAddress]
  apiError: Boolean
  noAddressesFound: Boolean
  invalidPostcode: Boolean
}

type EmailResponse {
  success: Boolean
  emailRecipient: String
}

type SuccessResponse {
  success: Boolean!
}

type AccountSignInResponse {
  accountId: String
  firstName: String
  lastName: String
  email: String
  token: String
  sessionIdentifier: String
  expires: DateTime
  success: Boolean!
  resentVerificationEmail: Boolean
  isBlocked: Boolean
}

type AddAndGetOtpResponse {
  success: Boolean!
  securityCode: String!
}

type AccountPasswordResetResponse {
  success: Boolean!
  hasBeenUsedBefore: Boolean
}

type AccountSendEmailPasswordResetLinkResponse {
  success: Boolean!
  isBlocked: Boolean
  accountId: String
}

type AccountPasswordResetTokenResponse {
  success: Boolean!
  token: String
  expired: Boolean
  invalid: Boolean
  accountId: String
}

type VerifyAccountEmailAddressResponse {
  success: Boolean!
  expired: Boolean
  invalid: Boolean
  accountId: String
}

type VerifyAccountReactivationTokenResponse {
  success: Boolean!
  expired: Boolean
  invalid: Boolean
  accountId: String
}

type AccountSendEmailReactivateAccountLinkResponse {
  success: Boolean!
  accountId: String!
  email: String
}

input ApplicationEligibility {
  buyerCountryIsoCode: String!
  coverPeriodId: Int!
  hasCompaniesHouseNumber: Boolean!
  hasEndBuyer: Boolean!
  hasMinimumUkGoodsOrServices: Boolean!
  totalContractValueId: Int!
  validExporterLocation: Boolean!
}

type CreateAnApplicationResponse {
  success: Boolean!
  id: String
  referenceNumber: Int
}

type MappedCisCountry {
  isoCode: String!
  name: String
  shortTermCover: Boolean
  riskCategory: String
  nbiIssueAvailable: Boolean
  canGetAQuoteOnline: Boolean
  canGetAQuoteByEmail: Boolean
  cannotGetAQuote: Boolean
  canApplyOnline: Boolean
  canApplyOffline: Boolean
  cannotApply: Boolean
}
