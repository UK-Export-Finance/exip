# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type ReferenceNumber {
  id: ID!
  application: Application
}

input ReferenceNumberWhereUniqueInput {
  id: ID
}

input ReferenceNumberWhereInput {
  AND: [ReferenceNumberWhereInput!]
  OR: [ReferenceNumberWhereInput!]
  NOT: [ReferenceNumberWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input ReferenceNumberOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ReferenceNumberUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
}

input ApplicationRelateToOneForUpdateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
  disconnect: Boolean
}

input ReferenceNumberUpdateArgs {
  where: ReferenceNumberWhereUniqueInput!
  data: ReferenceNumberUpdateInput!
}

input ReferenceNumberCreateInput {
  application: ApplicationRelateToOneForCreateInput
}

input ApplicationRelateToOneForCreateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
}

type Application {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: Eligibility
  referenceNumber: Int
  submissionDeadline: DateTime
  submissionDate: DateTime
  submissionType: String
  status: String
  previousStatus: String
  policyAndExport: PolicyAndExport
  exporter: Exporter
  exporterBusiness: ExporterBusiness
  exporterCompany: ExporterCompany
  exporterBroker: ExporterBroker
  buyer: Buyer
  sectionReview: SectionReview
  declaration: Declaration
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  eligibility: EligibilityWhereInput
  referenceNumber: IntNullableFilter
  submissionDeadline: DateTimeNullableFilter
  submissionDate: DateTimeNullableFilter
  submissionType: StringNullableFilter
  status: StringFilter
  previousStatus: StringFilter
  policyAndExport: PolicyAndExportWhereInput
  exporter: ExporterWhereInput
  exporterBusiness: ExporterBusinessWhereInput
  exporterCompany: ExporterCompanyWhereInput
  exporterBroker: ExporterBrokerWhereInput
  buyer: BuyerWhereInput
  sectionReview: SectionReviewWhereInput
  declaration: DeclarationWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ApplicationOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  referenceNumber: OrderDirection
  submissionDeadline: OrderDirection
  submissionDate: OrderDirection
  submissionType: OrderDirection
  status: OrderDirection
  previousStatus: OrderDirection
}

input ApplicationUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: EligibilityRelateToOneForUpdateInput
  referenceNumber: Int
  submissionDeadline: DateTime
  submissionDate: DateTime
  submissionType: String
  status: String
  previousStatus: String
  policyAndExport: PolicyAndExportRelateToOneForUpdateInput
  exporter: ExporterRelateToOneForUpdateInput
  exporterBusiness: ExporterBusinessRelateToOneForUpdateInput
  exporterCompany: ExporterCompanyRelateToOneForUpdateInput
  exporterBroker: ExporterBrokerRelateToOneForUpdateInput
  buyer: BuyerRelateToOneForUpdateInput
  sectionReview: SectionReviewRelateToOneForUpdateInput
  declaration: DeclarationRelateToOneForUpdateInput
}

input EligibilityRelateToOneForUpdateInput {
  create: EligibilityCreateInput
  connect: EligibilityWhereUniqueInput
  disconnect: Boolean
}

input PolicyAndExportRelateToOneForUpdateInput {
  create: PolicyAndExportCreateInput
  connect: PolicyAndExportWhereUniqueInput
  disconnect: Boolean
}

input ExporterRelateToOneForUpdateInput {
  create: ExporterCreateInput
  connect: ExporterWhereUniqueInput
  disconnect: Boolean
}

input ExporterBusinessRelateToOneForUpdateInput {
  create: ExporterBusinessCreateInput
  connect: ExporterBusinessWhereUniqueInput
  disconnect: Boolean
}

input ExporterCompanyRelateToOneForUpdateInput {
  create: ExporterCompanyCreateInput
  connect: ExporterCompanyWhereUniqueInput
  disconnect: Boolean
}

input ExporterBrokerRelateToOneForUpdateInput {
  create: ExporterBrokerCreateInput
  connect: ExporterBrokerWhereUniqueInput
  disconnect: Boolean
}

input BuyerRelateToOneForUpdateInput {
  create: BuyerCreateInput
  connect: BuyerWhereUniqueInput
  disconnect: Boolean
}

input SectionReviewRelateToOneForUpdateInput {
  create: SectionReviewCreateInput
  connect: SectionReviewWhereUniqueInput
  disconnect: Boolean
}

input DeclarationRelateToOneForUpdateInput {
  create: DeclarationCreateInput
  connect: DeclarationWhereUniqueInput
  disconnect: Boolean
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  eligibility: EligibilityRelateToOneForCreateInput
  referenceNumber: Int
  submissionDeadline: DateTime
  submissionDate: DateTime
  submissionType: String
  status: String
  previousStatus: String
  policyAndExport: PolicyAndExportRelateToOneForCreateInput
  exporter: ExporterRelateToOneForCreateInput
  exporterBusiness: ExporterBusinessRelateToOneForCreateInput
  exporterCompany: ExporterCompanyRelateToOneForCreateInput
  exporterBroker: ExporterBrokerRelateToOneForCreateInput
  buyer: BuyerRelateToOneForCreateInput
  sectionReview: SectionReviewRelateToOneForCreateInput
  declaration: DeclarationRelateToOneForCreateInput
}

input EligibilityRelateToOneForCreateInput {
  create: EligibilityCreateInput
  connect: EligibilityWhereUniqueInput
}

input PolicyAndExportRelateToOneForCreateInput {
  create: PolicyAndExportCreateInput
  connect: PolicyAndExportWhereUniqueInput
}

input ExporterRelateToOneForCreateInput {
  create: ExporterCreateInput
  connect: ExporterWhereUniqueInput
}

input ExporterBusinessRelateToOneForCreateInput {
  create: ExporterBusinessCreateInput
  connect: ExporterBusinessWhereUniqueInput
}

input ExporterCompanyRelateToOneForCreateInput {
  create: ExporterCompanyCreateInput
  connect: ExporterCompanyWhereUniqueInput
}

input ExporterBrokerRelateToOneForCreateInput {
  create: ExporterBrokerCreateInput
  connect: ExporterBrokerWhereUniqueInput
}

input BuyerRelateToOneForCreateInput {
  create: BuyerCreateInput
  connect: BuyerWhereUniqueInput
}

input SectionReviewRelateToOneForCreateInput {
  create: SectionReviewCreateInput
  connect: SectionReviewWhereUniqueInput
}

input DeclarationRelateToOneForCreateInput {
  create: DeclarationCreateInput
  connect: DeclarationWhereUniqueInput
}

type PolicyAndExport {
  id: ID!
  application: Application
  policyType: String
  requestedStartDate: DateTime
  contractCompletionDate: DateTime
  totalValueOfContract: Int
  creditPeriodWithBuyer: String
  policyCurrencyCode: String
  totalMonthsOfCover: Int
  totalSalesToBuyer: Int
  maximumBuyerWillOwe: Int
  goodsOrServicesDescription: String
  finalDestinationCountryCode: String
}

input PolicyAndExportWhereUniqueInput {
  id: ID
}

input PolicyAndExportWhereInput {
  AND: [PolicyAndExportWhereInput!]
  OR: [PolicyAndExportWhereInput!]
  NOT: [PolicyAndExportWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  policyType: StringNullableFilter
  requestedStartDate: DateTimeNullableFilter
  contractCompletionDate: DateTimeNullableFilter
  totalValueOfContract: IntNullableFilter
  creditPeriodWithBuyer: StringFilter
  policyCurrencyCode: StringFilter
  totalMonthsOfCover: IntNullableFilter
  totalSalesToBuyer: IntNullableFilter
  maximumBuyerWillOwe: IntNullableFilter
  goodsOrServicesDescription: StringFilter
  finalDestinationCountryCode: StringFilter
}

input PolicyAndExportOrderByInput {
  id: OrderDirection
  policyType: OrderDirection
  requestedStartDate: OrderDirection
  contractCompletionDate: OrderDirection
  totalValueOfContract: OrderDirection
  creditPeriodWithBuyer: OrderDirection
  policyCurrencyCode: OrderDirection
  totalMonthsOfCover: OrderDirection
  totalSalesToBuyer: OrderDirection
  maximumBuyerWillOwe: OrderDirection
  goodsOrServicesDescription: OrderDirection
  finalDestinationCountryCode: OrderDirection
}

input PolicyAndExportUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  policyType: String
  requestedStartDate: DateTime
  contractCompletionDate: DateTime
  totalValueOfContract: Int
  creditPeriodWithBuyer: String
  policyCurrencyCode: String
  totalMonthsOfCover: Int
  totalSalesToBuyer: Int
  maximumBuyerWillOwe: Int
  goodsOrServicesDescription: String
  finalDestinationCountryCode: String
}

input PolicyAndExportUpdateArgs {
  where: PolicyAndExportWhereUniqueInput!
  data: PolicyAndExportUpdateInput!
}

input PolicyAndExportCreateInput {
  application: ApplicationRelateToOneForCreateInput
  policyType: String
  requestedStartDate: DateTime
  contractCompletionDate: DateTime
  totalValueOfContract: Int
  creditPeriodWithBuyer: String
  policyCurrencyCode: String
  totalMonthsOfCover: Int
  totalSalesToBuyer: Int
  maximumBuyerWillOwe: Int
  goodsOrServicesDescription: String
  finalDestinationCountryCode: String
}

type Exporter {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  salt: String
  hash: String
  isVerified: Boolean
  verificationHash: String
  verificationExpiry: DateTime
  otpSalt: String
  otpHash: String
  otpExpiry: DateTime
  sessionExpiry: DateTime
  sessionIdentifier: String
  passwordResetHash: String
  passwordResetExpiry: DateTime
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
}

input ExporterWhereUniqueInput {
  id: ID
}

input ExporterWhereInput {
  AND: [ExporterWhereInput!]
  OR: [ExporterWhereInput!]
  NOT: [ExporterWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  salt: StringFilter
  hash: StringFilter
  isVerified: BooleanFilter
  verificationHash: StringFilter
  verificationExpiry: DateTimeNullableFilter
  otpSalt: StringFilter
  otpHash: StringFilter
  otpExpiry: DateTimeNullableFilter
  sessionExpiry: DateTimeNullableFilter
  sessionIdentifier: StringFilter
  passwordResetHash: StringFilter
  passwordResetExpiry: DateTimeNullableFilter
  applications: ApplicationManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ApplicationManyRelationFilter {
  every: ApplicationWhereInput
  some: ApplicationWhereInput
  none: ApplicationWhereInput
}

input ExporterOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  salt: OrderDirection
  hash: OrderDirection
  isVerified: OrderDirection
  verificationHash: OrderDirection
  verificationExpiry: OrderDirection
  otpSalt: OrderDirection
  otpHash: OrderDirection
  otpExpiry: OrderDirection
  sessionExpiry: OrderDirection
  sessionIdentifier: OrderDirection
  passwordResetHash: OrderDirection
  passwordResetExpiry: OrderDirection
}

input ExporterUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  salt: String
  hash: String
  isVerified: Boolean
  verificationHash: String
  verificationExpiry: DateTime
  otpSalt: String
  otpHash: String
  otpExpiry: DateTime
  sessionExpiry: DateTime
  sessionIdentifier: String
  passwordResetHash: String
  passwordResetExpiry: DateTime
  applications: ApplicationRelateToManyForUpdateInput
}

input ApplicationRelateToManyForUpdateInput {
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ExporterUpdateArgs {
  where: ExporterWhereUniqueInput!
  data: ExporterUpdateInput!
}

input ExporterCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  salt: String
  hash: String
  isVerified: Boolean
  verificationHash: String
  verificationExpiry: DateTime
  otpSalt: String
  otpHash: String
  otpExpiry: DateTime
  sessionExpiry: DateTime
  sessionIdentifier: String
  passwordResetHash: String
  passwordResetExpiry: DateTime
  applications: ApplicationRelateToManyForCreateInput
}

input ApplicationRelateToManyForCreateInput {
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

type ExporterBusiness {
  id: ID!
  application: Application
  goodsOrServicesSupplied: String
  totalYearsExporting: Int
  totalEmployeesUK: Int
  totalEmployeesInternational: Int
  estimatedAnnualTurnover: Int
  exportsTurnoverPercentage: Int
}

input ExporterBusinessWhereUniqueInput {
  id: ID
}

input ExporterBusinessWhereInput {
  AND: [ExporterBusinessWhereInput!]
  OR: [ExporterBusinessWhereInput!]
  NOT: [ExporterBusinessWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  goodsOrServicesSupplied: StringFilter
  totalYearsExporting: IntNullableFilter
  totalEmployeesUK: IntNullableFilter
  totalEmployeesInternational: IntNullableFilter
  estimatedAnnualTurnover: IntNullableFilter
  exportsTurnoverPercentage: IntNullableFilter
}

input ExporterBusinessOrderByInput {
  id: OrderDirection
  goodsOrServicesSupplied: OrderDirection
  totalYearsExporting: OrderDirection
  totalEmployeesUK: OrderDirection
  totalEmployeesInternational: OrderDirection
  estimatedAnnualTurnover: OrderDirection
  exportsTurnoverPercentage: OrderDirection
}

input ExporterBusinessUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  goodsOrServicesSupplied: String
  totalYearsExporting: Int
  totalEmployeesUK: Int
  totalEmployeesInternational: Int
  estimatedAnnualTurnover: Int
  exportsTurnoverPercentage: Int
}

input ExporterBusinessUpdateArgs {
  where: ExporterBusinessWhereUniqueInput!
  data: ExporterBusinessUpdateInput!
}

input ExporterBusinessCreateInput {
  application: ApplicationRelateToOneForCreateInput
  goodsOrServicesSupplied: String
  totalYearsExporting: Int
  totalEmployeesUK: Int
  totalEmployeesInternational: Int
  estimatedAnnualTurnover: Int
  exportsTurnoverPercentage: Int
}

type ExporterBroker {
  id: ID!
  application: Application
  isUsingBroker: String
  name: String
  addressLine1: String
  addressLine2: String
  town: String
  county: String
  postcode: String
  email: String
}

input ExporterBrokerWhereUniqueInput {
  id: ID
}

input ExporterBrokerWhereInput {
  AND: [ExporterBrokerWhereInput!]
  OR: [ExporterBrokerWhereInput!]
  NOT: [ExporterBrokerWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  isUsingBroker: StringNullableFilter
  name: StringFilter
  addressLine1: StringFilter
  addressLine2: StringFilter
  town: StringFilter
  county: StringFilter
  postcode: StringFilter
  email: StringFilter
}

input ExporterBrokerOrderByInput {
  id: OrderDirection
  isUsingBroker: OrderDirection
  name: OrderDirection
  addressLine1: OrderDirection
  addressLine2: OrderDirection
  town: OrderDirection
  county: OrderDirection
  postcode: OrderDirection
  email: OrderDirection
}

input ExporterBrokerUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  isUsingBroker: String
  name: String
  addressLine1: String
  addressLine2: String
  town: String
  county: String
  postcode: String
  email: String
}

input ExporterBrokerUpdateArgs {
  where: ExporterBrokerWhereUniqueInput!
  data: ExporterBrokerUpdateInput!
}

input ExporterBrokerCreateInput {
  application: ApplicationRelateToOneForCreateInput
  isUsingBroker: String
  name: String
  addressLine1: String
  addressLine2: String
  town: String
  county: String
  postcode: String
  email: String
}

type ExporterCompanyAddress {
  id: ID!
  exporterCompany: ExporterCompany
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

input ExporterCompanyAddressWhereUniqueInput {
  id: ID
}

input ExporterCompanyAddressWhereInput {
  AND: [ExporterCompanyAddressWhereInput!]
  OR: [ExporterCompanyAddressWhereInput!]
  NOT: [ExporterCompanyAddressWhereInput!]
  id: IDFilter
  exporterCompany: ExporterCompanyWhereInput
  addressLine1: StringFilter
  addressLine2: StringFilter
  careOf: StringFilter
  locality: StringFilter
  region: StringFilter
  postalCode: StringFilter
  country: StringFilter
  premises: StringFilter
}

input ExporterCompanyAddressOrderByInput {
  id: OrderDirection
  addressLine1: OrderDirection
  addressLine2: OrderDirection
  careOf: OrderDirection
  locality: OrderDirection
  region: OrderDirection
  postalCode: OrderDirection
  country: OrderDirection
  premises: OrderDirection
}

input ExporterCompanyAddressUpdateInput {
  exporterCompany: ExporterCompanyRelateToOneForUpdateInput
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

input ExporterCompanyAddressUpdateArgs {
  where: ExporterCompanyAddressWhereUniqueInput!
  data: ExporterCompanyAddressUpdateInput!
}

input ExporterCompanyAddressCreateInput {
  exporterCompany: ExporterCompanyRelateToOneForCreateInput
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

type ExporterCompany {
  id: ID!
  application: Application
  registeredOfficeAddress: ExporterCompanyAddress
  sicCodes(where: ExporterCompanySicCodeWhereInput! = {}, orderBy: [ExporterCompanySicCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterCompanySicCodeWhereUniqueInput): [ExporterCompanySicCode!]
  sicCodesCount(where: ExporterCompanySicCodeWhereInput! = {}): Int
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasTradingAddress: String
  hasTradingName: String
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
}

input ExporterCompanyWhereUniqueInput {
  id: ID
}

input ExporterCompanyWhereInput {
  AND: [ExporterCompanyWhereInput!]
  OR: [ExporterCompanyWhereInput!]
  NOT: [ExporterCompanyWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  registeredOfficeAddress: ExporterCompanyAddressWhereInput
  sicCodes: ExporterCompanySicCodeManyRelationFilter
  companyName: StringFilter
  companyNumber: StringFilter
  dateOfCreation: DateTimeNullableFilter
  hasTradingAddress: StringNullableFilter
  hasTradingName: StringNullableFilter
  companyWebsite: StringFilter
  phoneNumber: StringFilter
  financialYearEndDate: DateTimeNullableFilter
}

input ExporterCompanySicCodeManyRelationFilter {
  every: ExporterCompanySicCodeWhereInput
  some: ExporterCompanySicCodeWhereInput
  none: ExporterCompanySicCodeWhereInput
}

input ExporterCompanyOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
  companyNumber: OrderDirection
  dateOfCreation: OrderDirection
  hasTradingAddress: OrderDirection
  hasTradingName: OrderDirection
  companyWebsite: OrderDirection
  phoneNumber: OrderDirection
  financialYearEndDate: OrderDirection
}

input ExporterCompanyUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  registeredOfficeAddress: ExporterCompanyAddressRelateToOneForUpdateInput
  sicCodes: ExporterCompanySicCodeRelateToManyForUpdateInput
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasTradingAddress: String
  hasTradingName: String
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
}

input ExporterCompanyAddressRelateToOneForUpdateInput {
  create: ExporterCompanyAddressCreateInput
  connect: ExporterCompanyAddressWhereUniqueInput
  disconnect: Boolean
}

input ExporterCompanySicCodeRelateToManyForUpdateInput {
  disconnect: [ExporterCompanySicCodeWhereUniqueInput!]
  set: [ExporterCompanySicCodeWhereUniqueInput!]
  create: [ExporterCompanySicCodeCreateInput!]
  connect: [ExporterCompanySicCodeWhereUniqueInput!]
}

input ExporterCompanyUpdateArgs {
  where: ExporterCompanyWhereUniqueInput!
  data: ExporterCompanyUpdateInput!
}

input ExporterCompanyCreateInput {
  application: ApplicationRelateToOneForCreateInput
  registeredOfficeAddress: ExporterCompanyAddressRelateToOneForCreateInput
  sicCodes: ExporterCompanySicCodeRelateToManyForCreateInput
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasTradingAddress: String
  hasTradingName: String
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
}

input ExporterCompanyAddressRelateToOneForCreateInput {
  create: ExporterCompanyAddressCreateInput
  connect: ExporterCompanyAddressWhereUniqueInput
}

input ExporterCompanySicCodeRelateToManyForCreateInput {
  create: [ExporterCompanySicCodeCreateInput!]
  connect: [ExporterCompanySicCodeWhereUniqueInput!]
}

type ExporterCompanySicCode {
  id: ID!
  exporterCompany: ExporterCompany
  sicCode: String
  industrySectorName: String
}

input ExporterCompanySicCodeWhereUniqueInput {
  id: ID
}

input ExporterCompanySicCodeWhereInput {
  AND: [ExporterCompanySicCodeWhereInput!]
  OR: [ExporterCompanySicCodeWhereInput!]
  NOT: [ExporterCompanySicCodeWhereInput!]
  id: IDFilter
  exporterCompany: ExporterCompanyWhereInput
  sicCode: StringFilter
  industrySectorName: StringFilter
}

input ExporterCompanySicCodeOrderByInput {
  id: OrderDirection
  sicCode: OrderDirection
  industrySectorName: OrderDirection
}

input ExporterCompanySicCodeUpdateInput {
  exporterCompany: ExporterCompanyRelateToOneForUpdateInput
  sicCode: String
  industrySectorName: String
}

input ExporterCompanySicCodeUpdateArgs {
  where: ExporterCompanySicCodeWhereUniqueInput!
  data: ExporterCompanySicCodeUpdateInput!
}

input ExporterCompanySicCodeCreateInput {
  exporterCompany: ExporterCompanyRelateToOneForCreateInput
  sicCode: String
  industrySectorName: String
}

type Buyer {
  id: ID!
  application: Application
  companyOrOrganisationName: String
  address: String
  country: Country
  registrationNumber: String
  website: String
  contactFirstName: String
  contactLastName: String
  contactPosition: String
  contactEmail: String
  canContactBuyer: String
  exporterIsConnectedWithBuyer: String
  exporterHasTradedWithBuyer: String
}

input BuyerWhereUniqueInput {
  id: ID
}

input BuyerWhereInput {
  AND: [BuyerWhereInput!]
  OR: [BuyerWhereInput!]
  NOT: [BuyerWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  companyOrOrganisationName: StringFilter
  address: StringFilter
  country: CountryWhereInput
  registrationNumber: StringFilter
  website: StringFilter
  contactFirstName: StringFilter
  contactLastName: StringFilter
  contactPosition: StringFilter
  contactEmail: StringFilter
  canContactBuyer: StringNullableFilter
  exporterIsConnectedWithBuyer: StringNullableFilter
  exporterHasTradedWithBuyer: StringNullableFilter
}

input BuyerOrderByInput {
  id: OrderDirection
  companyOrOrganisationName: OrderDirection
  address: OrderDirection
  registrationNumber: OrderDirection
  website: OrderDirection
  contactFirstName: OrderDirection
  contactLastName: OrderDirection
  contactPosition: OrderDirection
  contactEmail: OrderDirection
  canContactBuyer: OrderDirection
  exporterIsConnectedWithBuyer: OrderDirection
  exporterHasTradedWithBuyer: OrderDirection
}

input BuyerUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  companyOrOrganisationName: String
  address: String
  country: CountryRelateToOneForUpdateInput
  registrationNumber: String
  website: String
  contactFirstName: String
  contactLastName: String
  contactPosition: String
  contactEmail: String
  canContactBuyer: String
  exporterIsConnectedWithBuyer: String
  exporterHasTradedWithBuyer: String
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input BuyerUpdateArgs {
  where: BuyerWhereUniqueInput!
  data: BuyerUpdateInput!
}

input BuyerCreateInput {
  application: ApplicationRelateToOneForCreateInput
  companyOrOrganisationName: String
  address: String
  country: CountryRelateToOneForCreateInput
  registrationNumber: String
  website: String
  contactFirstName: String
  contactLastName: String
  contactPosition: String
  contactEmail: String
  canContactBuyer: String
  exporterIsConnectedWithBuyer: String
  exporterHasTradedWithBuyer: String
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

type Country {
  id: ID!
  isoCode: String
  name: String
}

input CountryWhereUniqueInput {
  id: ID
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  isoCode: StringFilter
  name: StringFilter
}

input CountryOrderByInput {
  id: OrderDirection
  isoCode: OrderDirection
  name: OrderDirection
}

input CountryUpdateInput {
  isoCode: String
  name: String
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  isoCode: String
  name: String
}

type Eligibility {
  id: ID!
  application: Application
  buyerCountry: Country
  hasMinimumUkGoodsOrServices: Boolean
  validExporterLocation: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  needPreCreditPeriodCover: Boolean
  wantCoverOverMaxAmount: Boolean
  wantCoverOverMaxPeriod: Boolean
}

input EligibilityWhereUniqueInput {
  id: ID
}

input EligibilityWhereInput {
  AND: [EligibilityWhereInput!]
  OR: [EligibilityWhereInput!]
  NOT: [EligibilityWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  buyerCountry: CountryWhereInput
  hasMinimumUkGoodsOrServices: BooleanFilter
  validExporterLocation: BooleanFilter
  hasCompaniesHouseNumber: BooleanFilter
  otherPartiesInvolved: BooleanFilter
  paidByLetterOfCredit: BooleanFilter
  needPreCreditPeriodCover: BooleanFilter
  wantCoverOverMaxAmount: BooleanFilter
  wantCoverOverMaxPeriod: BooleanFilter
}

input EligibilityOrderByInput {
  id: OrderDirection
  hasMinimumUkGoodsOrServices: OrderDirection
  validExporterLocation: OrderDirection
  hasCompaniesHouseNumber: OrderDirection
  otherPartiesInvolved: OrderDirection
  paidByLetterOfCredit: OrderDirection
  needPreCreditPeriodCover: OrderDirection
  wantCoverOverMaxAmount: OrderDirection
  wantCoverOverMaxPeriod: OrderDirection
}

input EligibilityUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  buyerCountry: CountryRelateToOneForUpdateInput
  hasMinimumUkGoodsOrServices: Boolean
  validExporterLocation: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  needPreCreditPeriodCover: Boolean
  wantCoverOverMaxAmount: Boolean
  wantCoverOverMaxPeriod: Boolean
}

input EligibilityUpdateArgs {
  where: EligibilityWhereUniqueInput!
  data: EligibilityUpdateInput!
}

input EligibilityCreateInput {
  application: ApplicationRelateToOneForCreateInput
  buyerCountry: CountryRelateToOneForCreateInput
  hasMinimumUkGoodsOrServices: Boolean
  validExporterLocation: Boolean
  hasCompaniesHouseNumber: Boolean
  otherPartiesInvolved: Boolean
  paidByLetterOfCredit: Boolean
  needPreCreditPeriodCover: Boolean
  wantCoverOverMaxAmount: Boolean
  wantCoverOverMaxPeriod: Boolean
}

type SectionReview {
  id: ID!
  application: Application
  eligibility: Boolean
  policyAndExport: Boolean
  exporterBusiness: Boolean
  buyer: Boolean
}

input SectionReviewWhereUniqueInput {
  id: ID
}

input SectionReviewWhereInput {
  AND: [SectionReviewWhereInput!]
  OR: [SectionReviewWhereInput!]
  NOT: [SectionReviewWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  eligibility: BooleanFilter
  policyAndExport: BooleanFilter
  exporterBusiness: BooleanFilter
  buyer: BooleanFilter
}

input SectionReviewOrderByInput {
  id: OrderDirection
  eligibility: OrderDirection
  policyAndExport: OrderDirection
  exporterBusiness: OrderDirection
  buyer: OrderDirection
}

input SectionReviewUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  eligibility: Boolean
  policyAndExport: Boolean
  exporterBusiness: Boolean
  buyer: Boolean
}

input SectionReviewUpdateArgs {
  where: SectionReviewWhereUniqueInput!
  data: SectionReviewUpdateInput!
}

input SectionReviewCreateInput {
  application: ApplicationRelateToOneForCreateInput
  eligibility: Boolean
  policyAndExport: Boolean
  exporterBusiness: Boolean
  buyer: Boolean
}

type Declaration {
  id: ID!
  application: Application
  antiBribery: DeclarationAntiBribery
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgement
  howDataWillBeUsed: DeclarationHowDataWillBeUsed
  agreeToConfidentiality: Boolean
  agreeToAntiBribery: Boolean
  hasAntiBriberyCodeOfConduct: String
  willExportWithAntiBriberyCodeOfConduct: String
  agreeToConfirmationAndAcknowledgements: Boolean
  agreeHowDataWillBeUsed: Boolean
}

input DeclarationWhereUniqueInput {
  id: ID
}

input DeclarationWhereInput {
  AND: [DeclarationWhereInput!]
  OR: [DeclarationWhereInput!]
  NOT: [DeclarationWhereInput!]
  id: IDFilter
  application: ApplicationWhereInput
  antiBribery: DeclarationAntiBriberyWhereInput
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgementWhereInput
  howDataWillBeUsed: DeclarationHowDataWillBeUsedWhereInput
  agreeToConfidentiality: BooleanFilter
  agreeToAntiBribery: BooleanFilter
  hasAntiBriberyCodeOfConduct: StringNullableFilter
  willExportWithAntiBriberyCodeOfConduct: StringNullableFilter
  agreeToConfirmationAndAcknowledgements: BooleanFilter
  agreeHowDataWillBeUsed: BooleanFilter
}

input DeclarationOrderByInput {
  id: OrderDirection
  agreeToConfidentiality: OrderDirection
  agreeToAntiBribery: OrderDirection
  hasAntiBriberyCodeOfConduct: OrderDirection
  willExportWithAntiBriberyCodeOfConduct: OrderDirection
  agreeToConfirmationAndAcknowledgements: OrderDirection
  agreeHowDataWillBeUsed: OrderDirection
}

input DeclarationUpdateInput {
  application: ApplicationRelateToOneForUpdateInput
  antiBribery: DeclarationAntiBriberyRelateToOneForUpdateInput
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgementRelateToOneForUpdateInput
  howDataWillBeUsed: DeclarationHowDataWillBeUsedRelateToOneForUpdateInput
  agreeToConfidentiality: Boolean
  agreeToAntiBribery: Boolean
  hasAntiBriberyCodeOfConduct: String
  willExportWithAntiBriberyCodeOfConduct: String
  agreeToConfirmationAndAcknowledgements: Boolean
  agreeHowDataWillBeUsed: Boolean
}

input DeclarationAntiBriberyRelateToOneForUpdateInput {
  create: DeclarationAntiBriberyCreateInput
  connect: DeclarationAntiBriberyWhereUniqueInput
  disconnect: Boolean
}

input DeclarationConfirmationAndAcknowledgementRelateToOneForUpdateInput {
  create: DeclarationConfirmationAndAcknowledgementCreateInput
  connect: DeclarationConfirmationAndAcknowledgementWhereUniqueInput
  disconnect: Boolean
}

input DeclarationHowDataWillBeUsedRelateToOneForUpdateInput {
  create: DeclarationHowDataWillBeUsedCreateInput
  connect: DeclarationHowDataWillBeUsedWhereUniqueInput
  disconnect: Boolean
}

input DeclarationUpdateArgs {
  where: DeclarationWhereUniqueInput!
  data: DeclarationUpdateInput!
}

input DeclarationCreateInput {
  application: ApplicationRelateToOneForCreateInput
  antiBribery: DeclarationAntiBriberyRelateToOneForCreateInput
  confirmationAndAcknowledgements: DeclarationConfirmationAndAcknowledgementRelateToOneForCreateInput
  howDataWillBeUsed: DeclarationHowDataWillBeUsedRelateToOneForCreateInput
  agreeToConfidentiality: Boolean
  agreeToAntiBribery: Boolean
  hasAntiBriberyCodeOfConduct: String
  willExportWithAntiBriberyCodeOfConduct: String
  agreeToConfirmationAndAcknowledgements: Boolean
  agreeHowDataWillBeUsed: Boolean
}

input DeclarationAntiBriberyRelateToOneForCreateInput {
  create: DeclarationAntiBriberyCreateInput
  connect: DeclarationAntiBriberyWhereUniqueInput
}

input DeclarationConfirmationAndAcknowledgementRelateToOneForCreateInput {
  create: DeclarationConfirmationAndAcknowledgementCreateInput
  connect: DeclarationConfirmationAndAcknowledgementWhereUniqueInput
}

input DeclarationHowDataWillBeUsedRelateToOneForCreateInput {
  create: DeclarationHowDataWillBeUsedCreateInput
  connect: DeclarationHowDataWillBeUsedWhereUniqueInput
}

type DeclarationAntiBribery {
  id: ID!
  version: String
  content: DeclarationAntiBribery_content_Document
}

type DeclarationAntiBribery_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeclarationAntiBriberyWhereUniqueInput {
  id: ID
}

input DeclarationAntiBriberyWhereInput {
  AND: [DeclarationAntiBriberyWhereInput!]
  OR: [DeclarationAntiBriberyWhereInput!]
  NOT: [DeclarationAntiBriberyWhereInput!]
  id: IDFilter
  version: StringFilter
}

input DeclarationAntiBriberyOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input DeclarationAntiBriberyUpdateInput {
  version: String
  content: JSON
}

input DeclarationAntiBriberyUpdateArgs {
  where: DeclarationAntiBriberyWhereUniqueInput!
  data: DeclarationAntiBriberyUpdateInput!
}

input DeclarationAntiBriberyCreateInput {
  version: String
  content: JSON
}

type DeclarationConfirmationAndAcknowledgement {
  id: ID!
  version: String
  content: DeclarationConfirmationAndAcknowledgement_content_Document
}

type DeclarationConfirmationAndAcknowledgement_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeclarationConfirmationAndAcknowledgementWhereUniqueInput {
  id: ID
}

input DeclarationConfirmationAndAcknowledgementWhereInput {
  AND: [DeclarationConfirmationAndAcknowledgementWhereInput!]
  OR: [DeclarationConfirmationAndAcknowledgementWhereInput!]
  NOT: [DeclarationConfirmationAndAcknowledgementWhereInput!]
  id: IDFilter
  version: StringFilter
}

input DeclarationConfirmationAndAcknowledgementOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input DeclarationConfirmationAndAcknowledgementUpdateInput {
  version: String
  content: JSON
}

input DeclarationConfirmationAndAcknowledgementUpdateArgs {
  where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!
  data: DeclarationConfirmationAndAcknowledgementUpdateInput!
}

input DeclarationConfirmationAndAcknowledgementCreateInput {
  version: String
  content: JSON
}

type DeclarationHowDataWillBeUsed {
  id: ID!
  version: String
  content: DeclarationHowDataWillBeUsed_content_Document
}

type DeclarationHowDataWillBeUsed_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input DeclarationHowDataWillBeUsedWhereUniqueInput {
  id: ID
}

input DeclarationHowDataWillBeUsedWhereInput {
  AND: [DeclarationHowDataWillBeUsedWhereInput!]
  OR: [DeclarationHowDataWillBeUsedWhereInput!]
  NOT: [DeclarationHowDataWillBeUsedWhereInput!]
  id: IDFilter
  version: StringFilter
}

input DeclarationHowDataWillBeUsedOrderByInput {
  id: OrderDirection
  version: OrderDirection
}

input DeclarationHowDataWillBeUsedUpdateInput {
  version: String
  content: JSON
}

input DeclarationHowDataWillBeUsedUpdateArgs {
  where: DeclarationHowDataWillBeUsedWhereUniqueInput!
  data: DeclarationHowDataWillBeUsedUpdateInput!
}

input DeclarationHowDataWillBeUsedCreateInput {
  version: String
  content: JSON
}

type Page {
  id: ID!
  heading: String
  metaTitle: String
  content: Page_content_Document
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  heading: StringFilter
  metaTitle: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  heading: OrderDirection
  metaTitle: OrderDirection
}

input PageUpdateInput {
  heading: String
  metaTitle: String
  content: JSON
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  heading: String
  metaTitle: String
  content: JSON
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createReferenceNumber(data: ReferenceNumberCreateInput!): ReferenceNumber
  createReferenceNumbers(data: [ReferenceNumberCreateInput!]!): [ReferenceNumber]
  updateReferenceNumber(where: ReferenceNumberWhereUniqueInput!, data: ReferenceNumberUpdateInput!): ReferenceNumber
  updateReferenceNumbers(data: [ReferenceNumberUpdateArgs!]!): [ReferenceNumber]
  deleteReferenceNumber(where: ReferenceNumberWhereUniqueInput!): ReferenceNumber
  deleteReferenceNumbers(where: [ReferenceNumberWhereUniqueInput!]!): [ReferenceNumber]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(where: ApplicationWhereUniqueInput!, data: ApplicationUpdateInput!): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createPolicyAndExport(data: PolicyAndExportCreateInput!): PolicyAndExport
  createPolicyAndExports(data: [PolicyAndExportCreateInput!]!): [PolicyAndExport]
  updatePolicyAndExport(where: PolicyAndExportWhereUniqueInput!, data: PolicyAndExportUpdateInput!): PolicyAndExport
  updatePolicyAndExports(data: [PolicyAndExportUpdateArgs!]!): [PolicyAndExport]
  deletePolicyAndExport(where: PolicyAndExportWhereUniqueInput!): PolicyAndExport
  deletePolicyAndExports(where: [PolicyAndExportWhereUniqueInput!]!): [PolicyAndExport]
  createExporter(data: ExporterCreateInput!): Exporter
  createExporters(data: [ExporterCreateInput!]!): [Exporter]
  updateExporter(where: ExporterWhereUniqueInput!, data: ExporterUpdateInput!): Exporter
  updateExporters(data: [ExporterUpdateArgs!]!): [Exporter]
  deleteExporter(where: ExporterWhereUniqueInput!): Exporter
  deleteExporters(where: [ExporterWhereUniqueInput!]!): [Exporter]
  createExporterBusiness(data: ExporterBusinessCreateInput!): ExporterBusiness
  createExporterBusinesses(data: [ExporterBusinessCreateInput!]!): [ExporterBusiness]
  updateExporterBusiness(where: ExporterBusinessWhereUniqueInput!, data: ExporterBusinessUpdateInput!): ExporterBusiness
  updateExporterBusinesses(data: [ExporterBusinessUpdateArgs!]!): [ExporterBusiness]
  deleteExporterBusiness(where: ExporterBusinessWhereUniqueInput!): ExporterBusiness
  deleteExporterBusinesses(where: [ExporterBusinessWhereUniqueInput!]!): [ExporterBusiness]
  createExporterBroker(data: ExporterBrokerCreateInput!): ExporterBroker
  createExporterBrokers(data: [ExporterBrokerCreateInput!]!): [ExporterBroker]
  updateExporterBroker(where: ExporterBrokerWhereUniqueInput!, data: ExporterBrokerUpdateInput!): ExporterBroker
  updateExporterBrokers(data: [ExporterBrokerUpdateArgs!]!): [ExporterBroker]
  deleteExporterBroker(where: ExporterBrokerWhereUniqueInput!): ExporterBroker
  deleteExporterBrokers(where: [ExporterBrokerWhereUniqueInput!]!): [ExporterBroker]
  createExporterCompanyAddress(data: ExporterCompanyAddressCreateInput!): ExporterCompanyAddress
  createExporterCompanyAddresses(data: [ExporterCompanyAddressCreateInput!]!): [ExporterCompanyAddress]
  updateExporterCompanyAddress(where: ExporterCompanyAddressWhereUniqueInput!, data: ExporterCompanyAddressUpdateInput!): ExporterCompanyAddress
  updateExporterCompanyAddresses(data: [ExporterCompanyAddressUpdateArgs!]!): [ExporterCompanyAddress]
  deleteExporterCompanyAddress(where: ExporterCompanyAddressWhereUniqueInput!): ExporterCompanyAddress
  deleteExporterCompanyAddresses(where: [ExporterCompanyAddressWhereUniqueInput!]!): [ExporterCompanyAddress]
  createExporterCompany(data: ExporterCompanyCreateInput!): ExporterCompany
  createExporterCompanies(data: [ExporterCompanyCreateInput!]!): [ExporterCompany]
  updateExporterCompany(where: ExporterCompanyWhereUniqueInput!, data: ExporterCompanyUpdateInput!): ExporterCompany
  updateExporterCompanies(data: [ExporterCompanyUpdateArgs!]!): [ExporterCompany]
  deleteExporterCompany(where: ExporterCompanyWhereUniqueInput!): ExporterCompany
  deleteExporterCompanies(where: [ExporterCompanyWhereUniqueInput!]!): [ExporterCompany]
  createExporterCompanySicCode(data: ExporterCompanySicCodeCreateInput!): ExporterCompanySicCode
  createExporterCompanySicCodes(data: [ExporterCompanySicCodeCreateInput!]!): [ExporterCompanySicCode]
  updateExporterCompanySicCode(where: ExporterCompanySicCodeWhereUniqueInput!, data: ExporterCompanySicCodeUpdateInput!): ExporterCompanySicCode
  updateExporterCompanySicCodes(data: [ExporterCompanySicCodeUpdateArgs!]!): [ExporterCompanySicCode]
  deleteExporterCompanySicCode(where: ExporterCompanySicCodeWhereUniqueInput!): ExporterCompanySicCode
  deleteExporterCompanySicCodes(where: [ExporterCompanySicCodeWhereUniqueInput!]!): [ExporterCompanySicCode]
  createBuyer(data: BuyerCreateInput!): Buyer
  createBuyers(data: [BuyerCreateInput!]!): [Buyer]
  updateBuyer(where: BuyerWhereUniqueInput!, data: BuyerUpdateInput!): Buyer
  updateBuyers(data: [BuyerUpdateArgs!]!): [Buyer]
  deleteBuyer(where: BuyerWhereUniqueInput!): Buyer
  deleteBuyers(where: [BuyerWhereUniqueInput!]!): [Buyer]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(where: CountryWhereUniqueInput!, data: CountryUpdateInput!): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createEligibility(data: EligibilityCreateInput!): Eligibility
  createEligibilities(data: [EligibilityCreateInput!]!): [Eligibility]
  updateEligibility(where: EligibilityWhereUniqueInput!, data: EligibilityUpdateInput!): Eligibility
  updateEligibilities(data: [EligibilityUpdateArgs!]!): [Eligibility]
  deleteEligibility(where: EligibilityWhereUniqueInput!): Eligibility
  deleteEligibilities(where: [EligibilityWhereUniqueInput!]!): [Eligibility]
  createSectionReview(data: SectionReviewCreateInput!): SectionReview
  createSectionReviews(data: [SectionReviewCreateInput!]!): [SectionReview]
  updateSectionReview(where: SectionReviewWhereUniqueInput!, data: SectionReviewUpdateInput!): SectionReview
  updateSectionReviews(data: [SectionReviewUpdateArgs!]!): [SectionReview]
  deleteSectionReview(where: SectionReviewWhereUniqueInput!): SectionReview
  deleteSectionReviews(where: [SectionReviewWhereUniqueInput!]!): [SectionReview]
  createDeclaration(data: DeclarationCreateInput!): Declaration
  createDeclarations(data: [DeclarationCreateInput!]!): [Declaration]
  updateDeclaration(where: DeclarationWhereUniqueInput!, data: DeclarationUpdateInput!): Declaration
  updateDeclarations(data: [DeclarationUpdateArgs!]!): [Declaration]
  deleteDeclaration(where: DeclarationWhereUniqueInput!): Declaration
  deleteDeclarations(where: [DeclarationWhereUniqueInput!]!): [Declaration]
  createDeclarationAntiBribery(data: DeclarationAntiBriberyCreateInput!): DeclarationAntiBribery
  createDeclarationAntiBriberies(data: [DeclarationAntiBriberyCreateInput!]!): [DeclarationAntiBribery]
  updateDeclarationAntiBribery(where: DeclarationAntiBriberyWhereUniqueInput!, data: DeclarationAntiBriberyUpdateInput!): DeclarationAntiBribery
  updateDeclarationAntiBriberies(data: [DeclarationAntiBriberyUpdateArgs!]!): [DeclarationAntiBribery]
  deleteDeclarationAntiBribery(where: DeclarationAntiBriberyWhereUniqueInput!): DeclarationAntiBribery
  deleteDeclarationAntiBriberies(where: [DeclarationAntiBriberyWhereUniqueInput!]!): [DeclarationAntiBribery]
  createDeclarationConfirmationAndAcknowledgement(data: DeclarationConfirmationAndAcknowledgementCreateInput!): DeclarationConfirmationAndAcknowledgement
  createDeclarationConfirmationAndAcknowledgements(data: [DeclarationConfirmationAndAcknowledgementCreateInput!]!): [DeclarationConfirmationAndAcknowledgement]
  updateDeclarationConfirmationAndAcknowledgement(where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!, data: DeclarationConfirmationAndAcknowledgementUpdateInput!): DeclarationConfirmationAndAcknowledgement
  updateDeclarationConfirmationAndAcknowledgements(data: [DeclarationConfirmationAndAcknowledgementUpdateArgs!]!): [DeclarationConfirmationAndAcknowledgement]
  deleteDeclarationConfirmationAndAcknowledgement(where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!): DeclarationConfirmationAndAcknowledgement
  deleteDeclarationConfirmationAndAcknowledgements(where: [DeclarationConfirmationAndAcknowledgementWhereUniqueInput!]!): [DeclarationConfirmationAndAcknowledgement]
  createDeclarationHowDataWillBeUsed(data: DeclarationHowDataWillBeUsedCreateInput!): DeclarationHowDataWillBeUsed
  createDeclarationHowDataWillBeUseds(data: [DeclarationHowDataWillBeUsedCreateInput!]!): [DeclarationHowDataWillBeUsed]
  updateDeclarationHowDataWillBeUsed(where: DeclarationHowDataWillBeUsedWhereUniqueInput!, data: DeclarationHowDataWillBeUsedUpdateInput!): DeclarationHowDataWillBeUsed
  updateDeclarationHowDataWillBeUseds(data: [DeclarationHowDataWillBeUsedUpdateArgs!]!): [DeclarationHowDataWillBeUsed]
  deleteDeclarationHowDataWillBeUsed(where: DeclarationHowDataWillBeUsedWhereUniqueInput!): DeclarationHowDataWillBeUsed
  deleteDeclarationHowDataWillBeUseds(where: [DeclarationHowDataWillBeUsedWhereUniqueInput!]!): [DeclarationHowDataWillBeUsed]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!

  """ create an account """
  createAccount(firstName: String!, lastName: String!, email: String!, password: String!): CreateAccountResponse

  """ verify an account's email address """
  verifyAccountEmailAddress(token: String!): VerifyAccountEmailAddressResponse

  """ send confirm email address email """
  sendEmailConfirmEmailAddress(exporterId: String!): EmailResponse

  """ validate credentials, generate and email a OTP security code """
  accountSignIn(email: String!, password: String!): AccountSignInResponse

  """ generate and email a new OTP security code """
  accountSignInSendNewCode(accountId: String!): AccountSignInResponse

  """ verify an account's OTP security code """
  verifyAccountSignInCode(accountId: String!, securityCode: String!): AccountSignInResponse

  """ add an OTP security code to an account """
  addAndGetOTP(email: String!): AddAndGetOtpResponse

  """ send email with password reset link """
  sendEmailPasswordResetLink(email: String!): SuccessResponse

  """ update exporter company and company address """
  updateExporterCompanyAndCompanyAddress(companyId: ID!, companyAddressId: ID!, data: ExporterCompanyAndCompanyAddressInput!): ExporterCompanyAndCompanyAddress

  """ delete an application by reference number """
  deleteApplicationByReferenceNumber(referenceNumber: Int!): SuccessResponse

  """ submit an application """
  submitApplication(applicationId: String!): SuccessResponse

  """ send email for insurance feedback """
  sendEmailInsuranceFeedback(satisfaction: String, improvement: String, otherComments: String): SuccessResponse
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  referenceNumbers(where: ReferenceNumberWhereInput! = {}, orderBy: [ReferenceNumberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReferenceNumberWhereUniqueInput): [ReferenceNumber!]
  referenceNumber(where: ReferenceNumberWhereUniqueInput!): ReferenceNumber
  referenceNumbersCount(where: ReferenceNumberWhereInput! = {}): Int
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  application(where: ApplicationWhereUniqueInput!): Application
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  policyAndExports(where: PolicyAndExportWhereInput! = {}, orderBy: [PolicyAndExportOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PolicyAndExportWhereUniqueInput): [PolicyAndExport!]
  policyAndExport(where: PolicyAndExportWhereUniqueInput!): PolicyAndExport
  policyAndExportsCount(where: PolicyAndExportWhereInput! = {}): Int
  exporters(where: ExporterWhereInput! = {}, orderBy: [ExporterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterWhereUniqueInput): [Exporter!]
  exporter(where: ExporterWhereUniqueInput!): Exporter
  exportersCount(where: ExporterWhereInput! = {}): Int
  exporterBusinesses(where: ExporterBusinessWhereInput! = {}, orderBy: [ExporterBusinessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterBusinessWhereUniqueInput): [ExporterBusiness!]
  exporterBusiness(where: ExporterBusinessWhereUniqueInput!): ExporterBusiness
  exporterBusinessesCount(where: ExporterBusinessWhereInput! = {}): Int
  exporterBrokers(where: ExporterBrokerWhereInput! = {}, orderBy: [ExporterBrokerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterBrokerWhereUniqueInput): [ExporterBroker!]
  exporterBroker(where: ExporterBrokerWhereUniqueInput!): ExporterBroker
  exporterBrokersCount(where: ExporterBrokerWhereInput! = {}): Int
  exporterCompanyAddresses(where: ExporterCompanyAddressWhereInput! = {}, orderBy: [ExporterCompanyAddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterCompanyAddressWhereUniqueInput): [ExporterCompanyAddress!]
  exporterCompanyAddress(where: ExporterCompanyAddressWhereUniqueInput!): ExporterCompanyAddress
  exporterCompanyAddressesCount(where: ExporterCompanyAddressWhereInput! = {}): Int
  exporterCompanies(where: ExporterCompanyWhereInput! = {}, orderBy: [ExporterCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterCompanyWhereUniqueInput): [ExporterCompany!]
  exporterCompany(where: ExporterCompanyWhereUniqueInput!): ExporterCompany
  exporterCompaniesCount(where: ExporterCompanyWhereInput! = {}): Int
  exporterCompanySicCodes(where: ExporterCompanySicCodeWhereInput! = {}, orderBy: [ExporterCompanySicCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExporterCompanySicCodeWhereUniqueInput): [ExporterCompanySicCode!]
  exporterCompanySicCode(where: ExporterCompanySicCodeWhereUniqueInput!): ExporterCompanySicCode
  exporterCompanySicCodesCount(where: ExporterCompanySicCodeWhereInput! = {}): Int
  buyers(where: BuyerWhereInput! = {}, orderBy: [BuyerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuyerWhereUniqueInput): [Buyer!]
  buyer(where: BuyerWhereUniqueInput!): Buyer
  buyersCount(where: BuyerWhereInput! = {}): Int
  countries(where: CountryWhereInput! = {}, orderBy: [CountryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CountryWhereUniqueInput): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  eligibilities(where: EligibilityWhereInput! = {}, orderBy: [EligibilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EligibilityWhereUniqueInput): [Eligibility!]
  eligibility(where: EligibilityWhereUniqueInput!): Eligibility
  eligibilitiesCount(where: EligibilityWhereInput! = {}): Int
  sectionReviews(where: SectionReviewWhereInput! = {}, orderBy: [SectionReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionReviewWhereUniqueInput): [SectionReview!]
  sectionReview(where: SectionReviewWhereUniqueInput!): SectionReview
  sectionReviewsCount(where: SectionReviewWhereInput! = {}): Int
  declarations(where: DeclarationWhereInput! = {}, orderBy: [DeclarationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationWhereUniqueInput): [Declaration!]
  declaration(where: DeclarationWhereUniqueInput!): Declaration
  declarationsCount(where: DeclarationWhereInput! = {}): Int
  declarationAntiBriberies(where: DeclarationAntiBriberyWhereInput! = {}, orderBy: [DeclarationAntiBriberyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationAntiBriberyWhereUniqueInput): [DeclarationAntiBribery!]
  declarationAntiBribery(where: DeclarationAntiBriberyWhereUniqueInput!): DeclarationAntiBribery
  declarationAntiBriberiesCount(where: DeclarationAntiBriberyWhereInput! = {}): Int
  declarationConfirmationAndAcknowledgements(where: DeclarationConfirmationAndAcknowledgementWhereInput! = {}, orderBy: [DeclarationConfirmationAndAcknowledgementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationConfirmationAndAcknowledgementWhereUniqueInput): [DeclarationConfirmationAndAcknowledgement!]
  declarationConfirmationAndAcknowledgement(where: DeclarationConfirmationAndAcknowledgementWhereUniqueInput!): DeclarationConfirmationAndAcknowledgement
  declarationConfirmationAndAcknowledgementsCount(where: DeclarationConfirmationAndAcknowledgementWhereInput! = {}): Int
  declarationHowDataWillBeUseds(where: DeclarationHowDataWillBeUsedWhereInput! = {}, orderBy: [DeclarationHowDataWillBeUsedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeclarationHowDataWillBeUsedWhereUniqueInput): [DeclarationHowDataWillBeUsed!]
  declarationHowDataWillBeUsed(where: DeclarationHowDataWillBeUsedWhereUniqueInput!): DeclarationHowDataWillBeUsed
  declarationHowDataWillBeUsedsCount(where: DeclarationHowDataWillBeUsedWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem

  """ get an account by email """
  getAccountByEmail(email: String!): Account

  """ get companies house information """
  getCompaniesHouseInformation(companiesHouseNumber: String!): CompaniesHouseResponse
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type Account {
  id: String
  firstName: String
  lastName: String
  email: String
  isVerified: Boolean
}

input AccountInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type CreateAccountResponse {
  success: Boolean
  id: String
  firstName: String
  lastName: String
  email: String
  verificationHash: String
}

type CompaniesHouseCompanyAddress {
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

type CompaniesHouseResponse {
  companyName: String
  registeredOfficeAddress: ExporterCompanyAddress
  companyNumber: String
  dateOfCreation: String
  sicCodes: [String]
  industrySectorNames: [String]
  financialYearEndDate: DateTime
  success: Boolean
  apiError: Boolean
}

input OldSicCodes {
  id: String
}

input ExporterCompanyAddressInput {
  addressLine1: String
  addressLine2: String
  careOf: String
  locality: String
  region: String
  postalCode: String
  country: String
  premises: String
}

type ExporterCompanyAndCompanyAddress {
  id: ID
  registeredOfficeAddress: ExporterCompanyAddress
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasTradingAddress: String
  hasTradingName: String
  companyWebsite: String
  phoneNumber: String
}

input ExporterCompanyAndCompanyAddressInput {
  address: ExporterCompanyAddressInput
  sicCodes: [String]
  industrySectorNames: [String]
  companyName: String
  companyNumber: String
  dateOfCreation: DateTime
  hasTradingAddress: String
  hasTradingName: String
  companyWebsite: String
  phoneNumber: String
  financialYearEndDate: DateTime
  oldSicCodes: [OldSicCodes]
}

type EmailResponse {
  success: Boolean
  emailRecipient: String
}

type SuccessResponse {
  success: Boolean!
}

type AccountSignInResponse {
  accountId: String
  firstName: String
  lastName: String
  token: String
  sessionIdentifier: String
  expires: DateTime
  success: Boolean!
}

type AddAndGetOtpResponse {
  success: Boolean!
  securityCode: String!
}

type VerifyAccountEmailAddressResponse {
  success: Boolean!
  accountId: String
}
