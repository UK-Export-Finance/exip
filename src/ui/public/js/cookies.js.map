{"version":3,"file":"cookies.js","mappings":"qBAAA,MAAMA,EAAaC,SAASC,cAAc,YACpCC,EAAeF,SAASC,cAAc,wBACtCE,EAAeH,SAASC,cAAc,6BACtCG,EAAeJ,SAASC,cAAc,6BACtCI,EAA4BL,SAASC,cAAc,iCAGnDK,EAFoC,UAA5BC,OAAOC,SAASC,SAEH,2BAA6B,kBA4BlDC,EAAaC,IACjBX,SAASY,OAASN,EAAa,IAAMK,EAAQ,sCAvB5BE,MACjB,MAAMC,EAAO,IAAIC,KAGXC,EAASF,EAAKG,QAAQH,EAAKI,UAAY,GAG7C,MAAO,WAFW,IAAIH,KAAKC,GAAQG,cAEH,IAAI,EAgBiDN,GAR9E,UAAYN,OAAOC,SAASY,QAQyE,EA4D9GlB,EAAamB,iBAAiB,QAAQ,KACpCC,QAAQC,IAAI,iBArDPvB,SAASY,OAAOY,SAASlB,KAC5BJ,EAAauB,gBAAgB,UAC7BvB,EAAawB,aAAa,WAAY,MACtCxB,EAAayB,QACbzB,EAAamB,iBAAiB,QAAQ,KACpCnB,EAAauB,gBAAgB,WAAW,KAKxCrB,GACFA,EAAaiB,iBAAiB,SAAS,SAAUO,GAC/ClB,GAAU,EACZ,IAIEP,GACFA,EAAakB,iBAAiB,SAAS,SAAUO,GAC/ClB,GAAU,EACZ,IAIEX,GACFA,EAAWsB,iBAAiB,SAAS,SAAUO,GAC7C1B,EAAawB,aAAa,SAAU,UACpCE,EAAMC,gBACR,IAIExB,GACFA,EAA0BgB,iBAAiB,SAAS,SAAUO,GAG5D,GAFiB5B,SAASC,cAAc,yCAE1B,CACZ,MAAM6B,EAAS9B,SAASC,cAAc,yCAAyCU,MAEhE,WAAXmB,GACFpB,GAAU,GAGG,WAAXoB,GACFpB,GAAU,EAEd,CACF,GAOI,K","sources":["webpack://EXIP/./scripts/cookies.js"],"sourcesContent":["const hideButton = document.querySelector('.js-hide');\nconst cookieBanner = document.querySelector('.govuk-cookie-banner');\nconst acceptButton = document.querySelector('.js-cookies-button-accept');\nconst rejectButton = document.querySelector('.js-cookies-button-reject');\nconst changeCookiesSubmitButton = document.querySelector('.change-cookies-submit-button');\nconst https = window.location.protocol == 'https:';\n// `__Secure` prefix will only work with Secure flag i.e. HTTPS\nconst cookieName = https ? '__Secure-optionalCookies' : 'optionalCookies';\n\n/**\n * Sets cookie expiry timestamp\n * @returns String cookie expiry date\n */\nconst expiryDate = () => {\n  const date = new Date();\n\n  // 1 day.\n  const oneDay = date.setDate(date.getDate() + 1);\n  const utcString = new Date(oneDay).toUTCString();\n\n  return 'expires=' + utcString + '; ';\n};\n\n/**\n * Sets cookie domain attribute\n * @returns String cookie domain\n */\nconst domain = () => {\n  return 'domain=' + window.location.hostname;\n};\n\n/**\n * Set's cookie value\n * @param {Boolean} value cookie value\n */\nconst setCookie = (value) => {\n  document.cookie = cookieName + '=' + value + '; path=/; SameSite=Strict; secure; ' + expiryDate() + domain();\n};\n\n/**\n * Initialise cookie banner and listeners\n */\nconst init = () => {\n  // Shift focus to the cookie banner\n  if (!document.cookie.includes(cookieName)) {\n    cookieBanner.removeAttribute('hidden');\n    cookieBanner.setAttribute('tabindex', '-1');\n    cookieBanner.focus();\n    cookieBanner.addEventListener('blur', () => {\n      cookieBanner.removeAttribute('tabindex');\n    });\n  }\n\n  // Cookie is rejected by the user\n  if (rejectButton) {\n    rejectButton.addEventListener('click', function (event) {\n      setCookie(false);\n    });\n  }\n\n  // Cookie is accepted by the user\n  if (acceptButton) {\n    acceptButton.addEventListener('click', function (event) {\n      setCookie(true);\n    });\n  }\n\n  // Hide cookie banner\n  if (hideButton) {\n    hideButton.addEventListener('click', function (event) {\n      cookieBanner.setAttribute('hidden', 'hidden');\n      event.preventDefault();\n    });\n  }\n\n\n  if (changeCookiesSubmitButton) {\n    changeCookiesSubmitButton.addEventListener('click', function (event) {\n      const checkbox = document.querySelector('input[name=\"optionalCookies\"]:checked');\n\n      if (checkbox) {\n        const answer = document.querySelector('input[name=\"optionalCookies\"]:checked').value;\n\n        if (answer === 'reject') {\n          setCookie(false);\n        }\n\n        if (answer === 'accept') {\n          setCookie(true);\n        }\n      }\n    });\n  }\n};\n\n// Call init when element is loaded\ncookieBanner.addEventListener('load', () => {\n  console.log('Loaded cookie');\n  init();\n});\n"],"names":["hideButton","document","querySelector","cookieBanner","acceptButton","rejectButton","changeCookiesSubmitButton","cookieName","window","location","protocol","setCookie","value","cookie","expiryDate","date","Date","oneDay","setDate","getDate","toUTCString","hostname","addEventListener","console","log","includes","removeAttribute","setAttribute","focus","event","preventDefault","answer"],"sourceRoot":""}