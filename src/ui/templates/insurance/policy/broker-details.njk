{% extends 'index.njk' %}
{% from "govuk/components/back-link/macro.njk" import govukBackLink %}
{% from 'govuk/components/error-summary/macro.njk' import govukErrorSummary %}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% import '../../components/fieldset-legend.njk' as fieldsetLegend %}
{% import '../../components/form-buttons.njk' as formButtons %}

{% block pageTitle %}
  {{ CONTENT_STRINGS.PAGE_TITLE }}
{% endblock %}

{% block content %}

  {{ govukBackLink({
    text: CONTENT_STRINGS.LINKS.BACK,
    href: BACK_LINK,
    attributes: {
      "data-cy": DATA_CY.BACK_LINK
    }
  }) }}

  {% if validationErrors.summary %}
    {{ govukErrorSummary({
      titleText: CONTENT_STRINGS.ERROR_MESSAGES.THERE_IS_A_PROBLEM,
      errorList: validationErrors.summary
    }) }}
  {% endif %}

  <form method="POST" data-cy="form" enctype="application/x-www-form-urlencoded" novalidate>

    <input type="hidden" name="_csrf" value="{{ csrfToken }}">

    <div class="govuk-grid-row">
      <div class="govuk-grid-column-three-quarters-from-desktop">

        {% call govukFieldset({
          legend: {
            html: fieldsetLegend.render({ id: FIELDS.LEGEND.ID, legendText: FIELDS.LEGEND.LEGEND }),
            isPageHeading: true
          }
        }) %}

          {{ govukInput({
            id: FIELDS.NAME.ID,
            name: FIELDS.NAME.ID,
            value: submittedValues[FIELDS.NAME.ID] or application.broker[FIELDS.NAME.ID],
            label: {
              text: FIELDS.NAME.LABEL,
              classes: "govuk-body govuk-!-font-weight-bold",
              attributes: {
                id: FIELDS.NAME.ID + '-label',
                "data-cy": FIELDS.NAME.ID + "-label"
              }
            },
            classes: "govuk-input--width-20",
            attributes: {
              "data-cy": FIELDS.NAME.ID + "-input"
            },
            errorMessage: validationErrors.errorList[FIELDS.NAME.ID] and {
              text: validationErrors.errorList[FIELDS.NAME.ID].text,
              attributes: {
                "data-cy": FIELDS.NAME.ID + "-error-message"
              }
            }
          }) }}

          {{ govukInput({
            id: FIELDS.FULL_ADDRESS.ID,
            name: FIELDS.FULL_ADDRESS.ID,
            value: submittedValues[FIELDS.FULL_ADDRESS.ID] or application.broker[FIELDS.FULL_ADDRESS.ID],
            label: {
              text: FIELDS.FULL_ADDRESS.LABEL,
              classes: "govuk-body govuk-!-font-weight-bold",
              attributes: {
                id: FIELDS.FULL_ADDRESS.ID + '-label',
                "data-cy": FIELDS.FULL_ADDRESS.ID + "-label"
              }
            },
            classes: "govuk-input--width-20",
            attributes: {
              "data-cy": FIELDS.FULL_ADDRESS.ID + "-input"
            },
            errorMessage: validationErrors.errorList[FIELDS.FULL_ADDRESS.ID] and {
              text: validationErrors.errorList[FIELDS.FULL_ADDRESS.ID].text,
              attributes: {
                "data-cy": FIELDS.FULL_ADDRESS.ID + "-error-message"
              }
            }
          }) }}

          {{ govukInput({
            id: FIELDS.EMAIL.ID,
            name: FIELDS.EMAIL.ID,
            value: submittedValues[FIELDS.EMAIL.ID] or application.broker[FIELDS.EMAIL.ID],
            label: {
              text: FIELDS.EMAIL.LABEL,
              classes: "govuk-body govuk-!-font-weight-bold",
              attributes: {
                id: FIELDS.EMAIL.ID + '-label',
                "data-cy": FIELDS.EMAIL.ID + "-label"
              }
            },
            classes: "govuk-input--width-20",
            attributes: {
              "data-cy": FIELDS.EMAIL.ID + "-input"
            },
            errorMessage: validationErrors.errorList[FIELDS.EMAIL.ID] and {
              text: validationErrors.errorList[FIELDS.EMAIL.ID].text,
              attributes: {
                "data-cy": FIELDS.EMAIL.ID + "-error-message"
              }
            }
          }) }}

        {% endcall %}
          
      </div>
    </div>

    {{ formButtons.render({
      contentStrings: CONTENT_STRINGS.BUTTONS,
      saveAndBackUrl: SAVE_AND_BACK_URL
    }) }}

  </form>

{% endblock %}
