import finalDestinationPage from '../pages/finalDestination';
import partials from '../partials';
import {
  ORGANISATION,
  BUTTONS,
  LINKS,
  FIELDS,
  FINAL_DESTINATION_PAGE as CONTENT_STRINGS,
  ERROR_MESSAGES,
} from '../../../content-strings';
import CONSTANTS from '../../../constants';

context('What is the final destination for your export page', () => {
  beforeEach(() => {
    finalDestinationPage.visit();
    cy.url().should('include', CONSTANTS.ROUTES.FINAL_DESTINATION);
  });

  it('passes the audits', () => {
    cy.lighthouse({
      accessibility: 100,
      performance: 80,
      'best-practices': 100,
      seo: 90,
    });
    cy.pa11y();
  });

  it('renders a back button with correct link', () => {
    partials.backLink().should('exist');
    partials.backLink().invoke('text').then((text) => {
      expect(text.trim()).equal(LINKS.BACK);
    });

    partials.backLink().click();

    cy.url().should('include', CONSTANTS.ROUTES.TRIED_TO_OBTAIN_COVER);
  });

  it('renders a page title and heading', () => {
    const expectedPageTitle = `${CONTENT_STRINGS.PAGE_TITLE} - ${ORGANISATION}`;
    cy.title().should('eq', expectedPageTitle);

    finalDestinationPage.heading().invoke('text').then((text) => {
      expect(text.trim()).equal(CONTENT_STRINGS.HEADING);
    });
  });

  describe('searchable autocomplete input', () => {
    it('renders an input and hint', () => {
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().should('exist');

      const hint = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].hint();
      hint.should('exist');

      hint.invoke('text').then((text) => {
        const expectedText = FIELDS[`${CONSTANTS.FIELDS.COUNTRY}`].HINT;
        expect(text.trim()).equal(expectedText);
      });
    });

    it('renders `no results` message when no results are found', () => {
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('test');

      const noResults = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].noResults();
      noResults.should('exist');

      noResults.invoke('text').then((text) => {
        // this text is generated by external component.
        expect(text.trim()).equal('No results found');
      });
    });

    it('renders a single country result after searching', () => {
      // start searching for France
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('Fra');

      const noResults = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].noResults();
      noResults.should('not.exist');

      const results = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].results();

      results.should('have.length', 1);
    });

    it('renders multiple country results after searching', () => {
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('Be');

      const noResults = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].noResults();
      noResults.should('not.exist');

      const results = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].results();

      results.should('have.length.greaterThan', 1);
    });

    it('adds the country name to a hidden input value after searching', () => {
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('Fra');

      const noResults = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].noResults();
      noResults.should('not.exist');

      const results = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].results();

      // select the first result (France)
      results.first().click();

      // check hidden input value
      const expectedValue = 'France';
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].hiddenInput().should('have.attr', 'value', expectedValue);
    });

    it('allows user to remove a selected country and search again', () => {
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('Fra');
      const results = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].results();

      // select the first result (France)
      results.first().click();

      // clear the input
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().clear();

      // search for a different country, submit with enter key
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('Belg{enter}');

      // check hidden input value
      const expectedValue = 'Belgium';
      finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].hiddenInput().should('have.attr', 'value', expectedValue);
    });
  });

  it('renders a submit button', () => {
    const button = finalDestinationPage.submitButton();
    button.should('exist');

    button.invoke('text').then((text) => {
      expect(text.trim()).equal(BUTTONS.CONTINUE);
    });
  });

  describe('form submission', () => {
    describe('when submitting an empty form', () => {
      it('should render validation errors', () => {
        finalDestinationPage.submitButton().click();

        partials.errorSummaryListItems().should('exist');
        partials.errorSummaryListItems().should('have.length', 1);

        const expectedMessage = ERROR_MESSAGES[CONSTANTS.FIELDS.COUNTRY];

        partials.errorSummaryListItems().first().invoke('text').then((text) => {
          expect(text.trim()).equal(expectedMessage);
        });

        finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].errorMessage().invoke('text').then((text) => {
          expect(text.trim()).includes(expectedMessage);
        });
      });
    });

    describe('when submitting with a selected acountry', () => {
      it(`should redirect to ${CONSTANTS.ROUTES.UK_CONTENT_PERCENTAGE}`, () => {
        finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].searchInput().type('Fra');

        const results = finalDestinationPage[CONSTANTS.FIELDS.COUNTRY].results();
        results.first().click();

        finalDestinationPage.submitButton().click();

        cy.url().should('include', CONSTANTS.ROUTES.UK_CONTENT_PERCENTAGE);
      });
    });
  });
});
