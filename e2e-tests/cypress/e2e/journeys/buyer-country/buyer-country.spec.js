import { buyerCountryPage } from '../../pages';
import partials from '../../partials';
import {
  BUTTONS,
  ERROR_MESSAGES,
  FIELDS,
  LINKS,
  ORGANISATION,
  PAGES,
} from '../../../../content-strings';
import CONSTANTS from '../../../../constants';

const CONTENT_STRINGS = PAGES.BUYER_COUNTRY_PAGE;
const { ROUTES, FIELD_IDS } = CONSTANTS;

context('Buyer country page - as an exporter, I want to check if UKEF issue export insurance cover for where my buyer is based', () => {
  beforeEach(() => {
    cy.login();

    cy.url().should('include', ROUTES.QUOTE.BUYER_COUNTRY);
  });

  it('passes the audits', () => {
    cy.lighthouse({
      accessibility: 100,
      performance: 80,
      'best-practices': 100,
      seo: 60,
    });
  });

  it('renders a phase banner', () => {
    cy.checkPhaseBanner();
  });

  it('renders a back link with correct url', () => {
    partials.backLink().should('exist');
    partials.backLink().invoke('text').then((text) => {
      expect(text.trim()).equal(LINKS.BACK);
    });

    partials.backLink().should('have.attr', 'href', LINKS.EXTERNAL.BEFORE_YOU_START);
  });

  it('renders a page title and heading', () => {
    const expectedPageTitle = `${CONTENT_STRINGS.PAGE_TITLE} - ${ORGANISATION}`;
    cy.title().should('eq', expectedPageTitle);

    buyerCountryPage.heading().invoke('text').then((text) => {
      expect(text.trim()).equal(CONTENT_STRINGS.HEADING);
    });
  });

  it('renders a hint', () => {
    buyerCountryPage.hint().invoke('text').then((text) => {
      expect(text.trim()).equal(FIELDS[FIELD_IDS.COUNTRY].HINT);
    });
  });

  describe('searchable autocomplete input', () => {
    it('renders an input', () => {
      buyerCountryPage.searchInput().should('exist');
    });

    it('renders `no results` message when no results are found', () => {
      buyerCountryPage.searchInput().type('test');

      const noResults = buyerCountryPage.noResults();
      noResults.should('exist');

      noResults.invoke('text').then((text) => {
        // this text is generated by external component.
        expect(text.trim()).equal('No results found');
      });
    });

    it('renders a single country result after searching', () => {
      // start searching for Algeria
      buyerCountryPage.searchInput().type('Alg');

      const noResults = buyerCountryPage.noResults();
      noResults.should('not.exist');

      const results = buyerCountryPage.results();

      results.should('have.length', 1);
    });

    it('renders multiple country results after searching', () => {
      buyerCountryPage.searchInput().type('Be');

      const noResults = buyerCountryPage.noResults();
      noResults.should('not.exist');

      const results = buyerCountryPage.results();

      results.should('have.length.greaterThan', 1);
    });

    it('adds the country name to a hidden input value after searching', () => {
      buyerCountryPage.searchInput().type('Algeria');

      const noResults = buyerCountryPage.noResults();
      noResults.should('not.exist');

      const results = buyerCountryPage.results();

      // select the first result (Algeria)
      results.first().click();

      // check hidden input value
      const expectedValue = 'Algeria';
      buyerCountryPage.hiddenInput().should('have.attr', 'value', expectedValue);
    });

    it('allows user to remove a selected country and search again', () => {
      buyerCountryPage.searchInput().type('Algeria');
      const results = buyerCountryPage.results();

      // select the first result (Algeria)
      results.first().click();

      // clear the input
      buyerCountryPage.searchInput().clear();

      // search for a different country, submit with enter key
      buyerCountryPage.searchInput().type('Brazil{enter}');

      // check hidden input value
      const expectedValue = 'Brazil';
      buyerCountryPage.hiddenInput().should('have.attr', 'value', expectedValue);
    });
  });

  it('renders a submit button', () => {
    const button = buyerCountryPage.submitButton();
    button.should('exist');

    button.invoke('text').then((text) => {
      expect(text.trim()).equal(BUTTONS.CONTINUE);
    });
  });

  describe('form submission', () => {
    describe('when submitting an empty form', () => {
      beforeEach(() => {
        buyerCountryPage.submitButton().click();
      });

      it('should render validation errors', () => {
        partials.errorSummaryListItems().should('exist');
        partials.errorSummaryListItems().should('have.length', 1);

        const expectedMessage = ERROR_MESSAGES[FIELD_IDS.BUYER_COUNTRY];

        partials.errorSummaryListItems().first().invoke('text').then((text) => {
          expect(text.trim()).equal(expectedMessage);
        });

        buyerCountryPage.errorMessage().invoke('text').then((text) => {
          expect(text.trim()).includes(expectedMessage);
        });
      });

      it('renders a back link with correct url', () => {
        partials.backLink().should('exist');

        const expected = `${Cypress.config('baseUrl')}${ROUTES.QUOTE.BUYER_COUNTRY}`;

        partials.backLink().should('have.attr', 'href', expected);
      });

      it('should focus on input when clicking summary error message', () => {
        // autocomplete component does not have a focused attribute, instead it has a class.
        // this is added with client side JS.
        // we have to wait to ensure that client side js has been executed.
        cy.wait(8000); // eslint-disable-line cypress/no-unnecessary-waiting

        partials.errorSummaryListItemLinks().eq(0).click();

        buyerCountryPage.searchInput().should('have.class', 'autocomplete__input--focused');
      });
    });

    describe('when submitting with a supported country', () => {
      it(`should redirect to ${ROUTES.QUOTE.COMPANY_BASED}`, () => {
        buyerCountryPage.searchInput().type('Algeria');

        const results = buyerCountryPage.results();
        results.first().click();

        buyerCountryPage.submitButton().click();

        cy.url().should('include', ROUTES.QUOTE.COMPANY_BASED);
      });
    });
  });
});
