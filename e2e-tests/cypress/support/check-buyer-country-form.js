import {
  buyerCountryPage, heading, inlineErrorMessage, submitButton,
} from '../e2e/pages/shared';
import partials from '../e2e/partials';
import {
  BUTTONS, ERROR_MESSAGES, FIELDS, ORGANISATION, PAGES,
} from '../../content-strings';
import { FIELD_IDS } from '../../constants';

const CONTENT_STRINGS = PAGES.BUYER_COUNTRY;

const checkPageTitleAndHeading = () => {
  const expectedPageTitle = `${CONTENT_STRINGS.PAGE_TITLE} - ${ORGANISATION}`;
  cy.title().should('eq', expectedPageTitle);

  cy.checkText(heading(), CONTENT_STRINGS.PAGE_TITLE);
};

const checkInputHint = () => {
  cy.checkText(buyerCountryPage.hint(), FIELDS[FIELD_IDS.BUYER_COUNTRY].HINT);
};

const checkAutocompleteInput = {
  rendersInput: () => {
    buyerCountryPage.searchInput().should('exist');
  },
  rendersNoResultsMessage: () => {
    cy.keyboardInput(buyerCountryPage.searchInput(), 'test');

    const noResults = buyerCountryPage.noResults();
    noResults.should('exist');

    // this text is generated by external component.
    cy.checkText(noResults, 'No results found');
  },
  rendersSingleResult: () => {
    // start searching for Algeria
    cy.keyboardInput(buyerCountryPage.searchInput(), 'Alg');

    const noResults = buyerCountryPage.noResults();
    noResults.should('not.exist');

    const results = buyerCountryPage.results();

    results.should('have.length', 1);
  },
  rendersMultipleResults: () => {
    cy.keyboardInput(buyerCountryPage.searchInput(), 'Be');

    const noResults = buyerCountryPage.noResults();
    noResults.should('not.exist');

    const results = buyerCountryPage.results();

    results.should('have.length.greaterThan', 1);
  },
  allowsUserToRemoveCountryAndSearchAgain: () => {
    cy.keyboardInput(buyerCountryPage.searchInput(), 'Algeria');
    const results = buyerCountryPage.results();

    // select the first result (Algeria)
    results.first().click();

    // clear the input
    buyerCountryPage.searchInput().clear();

    // search for a different country, submit with enter key
    cy.keyboardInput(buyerCountryPage.searchInput(), 'Brazil{enter}');

    // check hidden input value
    const expectedValue = 'Brazil';

    cy.checkText(buyerCountryPage.results(), expectedValue);
  },
};

const checkSubmitButton = () => {
  submitButton().should('exist');

  cy.checkText(submitButton(), BUTTONS.CONTINUE);
};

const checkValidationErrors = () => {
  partials.errorSummaryListItems().should('exist');
  partials.errorSummaryListItems().should('have.length', 1);

  const expectedMessage = ERROR_MESSAGES[FIELD_IDS.BUYER_COUNTRY];

  cy.checkText(partials.errorSummaryListItems().first(), expectedMessage);

  cy.checkText(inlineErrorMessage(), `Error: ${expectedMessage}`);
};

const checkFocusOnInputWhenClickingSummaryErrorMessage = () => {
  // autocomplete component does not have a focused attribute, instead it has a class.
  // this is added with client side JS.
  // we have to wait to ensure that client side js has been executed.
  cy.wait(8000); // eslint-disable-line cypress/no-unnecessary-waiting

  partials.errorSummaryListItemLinks().eq(0).click();

  buyerCountryPage.searchInput().should('have.class', 'autocomplete__input--focused');
};

export {
  checkPageTitleAndHeading,
  checkInputHint,
  checkAutocompleteInput,
  checkSubmitButton,
  checkValidationErrors,
  checkFocusOnInputWhenClickingSummaryErrorMessage,
};
