import { buyerCountryPage, heading, inlineErrorMessage, submitButton } from '../e2e/pages/shared';
import partials from '../e2e/partials';
import { BUTTONS, ERROR_MESSAGES, FIELDS, ORGANISATION, PAGES } from '../../content-strings';
import { FIELD_IDS } from '../../constants';

const CONTENT_STRINGS = PAGES.BUYER_COUNTRY;

const checkPageTitleAndHeading = () => {
  const expectedPageTitle = `${CONTENT_STRINGS.PAGE_TITLE} - ${ORGANISATION}`;
  cy.title().should('eq', expectedPageTitle);

  heading().invoke('text').then((text) => {
    expect(text.trim()).equal(CONTENT_STRINGS.PAGE_TITLE);
  });
};

const checkInputHint = () => {
  buyerCountryPage.hint().invoke('text').then((text) => {
    expect(text.trim()).equal(FIELDS[FIELD_IDS.BUYER_COUNTRY].HINT);
  });
};

const checkAutocompleteInput = {
  rendersInput: () => {
    buyerCountryPage.searchInput().should('exist');
  },
  rendersNoResultsMessage: () => {
    buyerCountryPage.searchInput().type('test');

    const noResults = buyerCountryPage.noResults();
    noResults.should('exist');

    noResults.invoke('text').then((text) => {
      // this text is generated by external component.
      expect(text.trim()).equal('No results found');
    });
  },
  rendersSingleResult: () => {
    // start searching for Algeria
    buyerCountryPage.searchInput().type('Alg');

    const noResults = buyerCountryPage.noResults();
    noResults.should('not.exist');

    const results = buyerCountryPage.results();

    results.should('have.length', 1);
  },
  rendersMultipleResults: () => {
    buyerCountryPage.searchInput().type('Be');

    const noResults = buyerCountryPage.noResults();
    noResults.should('not.exist');

    const results = buyerCountryPage.results();

    results.should('have.length.greaterThan', 1);
  },
  allowsUserToRemoveCountryAndSearchAgain: () => {
    buyerCountryPage.searchInput().type('Algeria');
    const results = buyerCountryPage.results();

    // select the first result (Algeria)
    results.first().click();

    // clear the input
    buyerCountryPage.searchInput().clear();

    // search for a different country, submit with enter key
    buyerCountryPage.searchInput().type('Brazil{enter}');

    // check hidden input value
    const expectedValue = 'Brazil';

    buyerCountryPage.results().invoke('text').then((text) => {
      expect(text.trim()).equal(expectedValue);
    });
  },
};

const checkSubmitButton = () => {
  submitButton().should('exist');

  submitButton().invoke('text').then((text) => {
    expect(text.trim()).equal(BUTTONS.CONTINUE);
  });
};

const checkValidationErrors = () => {
  partials.errorSummaryListItems().should('exist');
  partials.errorSummaryListItems().should('have.length', 1);

  const expectedMessage = ERROR_MESSAGES[FIELD_IDS.BUYER_COUNTRY];

  partials.errorSummaryListItems().first().invoke('text').then((text) => {
    expect(text.trim()).equal(expectedMessage);
  });

  inlineErrorMessage().invoke('text').then((text) => {
    expect(text.trim()).includes(expectedMessage);
  });
};

const checkFocusOnInputWhenClickingSummaryErrorMessage = () => {
  // autocomplete component does not have a focused attribute, instead it has a class.
  // this is added with client side JS.
  // we have to wait to ensure that client side js has been executed.
  cy.wait(8000); // eslint-disable-line cypress/no-unnecessary-waiting

  partials.errorSummaryListItemLinks().eq(0).click();

  buyerCountryPage.searchInput().should('have.class', 'autocomplete__input--focused');
};

module.exports = {
  checkPageTitleAndHeading,
  checkInputHint,
  checkAutocompleteInput,
  checkSubmitButton,
  checkValidationErrors,
  checkFocusOnInputWhenClickingSummaryErrorMessage,
};
