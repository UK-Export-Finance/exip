name: PR linting & tests

on:
  pull_request:
    branches: [ main-application ]
    paths:
    - 'src/**'
    - 'e2e-tests/**'
    - 'generate-exip-pricing-grid/**'

env:
  environment: dev

jobs:
  set-environment:
    name: Set Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ env.environment }}
    steps:
    - name: Initialise Environment
      run: |
        echo Setting environment to ${{ env.environment }}

  linting:
    name: Linting
    environment:
      name: ${{ needs.set-environment.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Linting
        working-directory: ./
        run: |
          npm i
          npm run lint
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#exip-github-actions'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()  

  unit-tests:
    name: Unit tests
    environment:
      name: ${{ needs.set-environment.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Root unit tests
        working-directory: ./
        run: |
          npm i --legacy-peer-deps
          npm run test
      - name: UI unit tests
        working-directory: ./src/ui
        run: |
          npm i --legacy-peer-deps
          npm run test
          # TODO: Enable test
          # npm run component-test
      - name: API unit tests
        working-directory: ./src/api
        run: |
          npm i --legacy-peer-deps
          npm run test
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#exip-github-actions'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  e2e-journey-tests:
    name: Run e2e tests
    needs: set-environment
    environment:
      name: ${{ needs.set-environment.outputs.environment }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        machines: [ 1, 2, 3, 4 ]

    concurrency:
      group: e2e-journey-${{ github.workflow }}-${{ github.ref }}-${{ matrix.containers }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3
      - name: Start Docker Compose
        env:
          API_URL: ${{ secrets.API_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          BASIC_AUTH_KEY: ${{ secrets.BASIC_AUTH_KEY }}
          BASIC_AUTH_SECRET: ${{ secrets.BASIC_AUTH_SECRET }}
          MULESOFT_API_CIS_URL: ${{ secrets.MULESOFT_API_CIS_URL }}
          MULESOFT_API_CIS_KEY: ${{ secrets.MULESOFT_API_CIS_KEY }}
          MULESOFT_API_CIS_SECRET: ${{ secrets.MULESOFT_API_CIS_SECRET }}
          MULESOFT_API_MDM_EA_URL: ${{ secrets.MULESOFT_API_MDM_EA_URL }}
          MULESOFT_API_MDM_EA_KEY: ${{ secrets.MULESOFT_API_MDM_EA_KEY }}
          MULESOFT_API_MDM_EA_SECRET: ${{ secrets.MULESOFT_API_MDM_EA_SECRET }}
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
          GOV_NOTIFY_API_KEY: ${{ secrets.GOV_NOTIFY_API_KEY }}
          COMPANIES_HOUSE_API_URL: ${{ secrets.COMPANIES_HOUSE_API_URL }}
          COMPANIES_HOUSE_API_KEY: ${{ secrets.COMPANIES_HOUSE_API_KEY }}
        run: docker-compose up --build -d
      - name: Sleep for 30 seconds
        run: sleep 30s
      - name: Run e2e tests
        uses: cypress-io/github-action@v4
        with:
          headed: false
          record: true
          parallel: true
          browser: chrome
          group: 'EXIP'
          project: ./e2e-tests
          config: video=false
        env: 
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#exip-github-actions'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
