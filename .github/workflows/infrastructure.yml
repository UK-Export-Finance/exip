# This GHA is responsible for `EXIP` supporting infrastructure
# creation and configuration using `az cli` bash scripting.
#
# This is a GitHub Actions workflow for setting up the base infrastructure for the "EXIP" (name of the product) project. The workflow consists of several steps:
#
# Setup: This step sets up the environment variables for the workflow, including the environment name and timezone.
# Base Infrastructure Creation: This step creates the base infrastructure components using Azure CLI commands. It includes the creation of a resource group, an app service plan,
# a log analytics workspace, a container registry, a virtual network, VNET peering with an Azure Managed Instance (AMI) # SQL DB, and two web apps (UI and API).
#
# WebApp Configuration: This step configures the created web apps. It enables continuous deployment via containers, sets various configuration settings, such as enabling HTTPS, setting DNS server
# and VNET routing, configuring app settings, and configuring logging options.
# The workflow uses Azure CLI and Azure Login actions to interact with the Azure resources. It also uses environment variables and secrets to provide configuration values for the Azure commands.
# Please note that this is a workflow written in YAML syntax for GitHub Actions, and it is meant to be executed within a GitHub repository with the appropriate Azure credentials and configurations.
#
# Standard Azure naming convention has been followed:
# https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming
# A minor modification to standard naming convention has been made to not include the region.
#
#
# Following Azure services are consumed:
# 1. Azure resource group - https://learn.microsoft.com/en-us/cli/azure/group?view=azure-cli-latest#az-group-create
# 2. Azure app service plan - https://learn.microsoft.com/en-us/azure/app-service/overview-hosting-plans
# 3. Azure container registry - https://learn.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest#az-acr-create
# 4. Azure virtual network - https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview
# 5. Azure virtual network peer - https://learn.microsoft.com/en-us/cli/azure/network/vnet/peering?view=azure-cli-latest
# 6. Azure web app - https://learn.microsoft.com/en-us/azure/app-service/overview
#
#
# Execution
# *********
# GHA is only invoked when following conditions are satisfied:
# 1. Push to the `infrastructure` branch only.
# 2. Exact file path matches `.github/workflows/infrastructure.yml`.
#
# Flow
# ****
# Infrastructure üî®
# This is a GitHub workflow that builds and deploys infrastructure for EXIP.
#
# On:
# Push to the infrastructure branch
#
# Jobs:
# 1. Setup:
# Sets up environment variables and timezone.
#
# 2. Base:
# Creates a resource group, app service plan, log analytics workspace, container registry, virtual network, and VNET peering.
# Creates a web app for the UI and API.
#
# 3. WebApp:
# Configures continuous deployment for the UI and API.
# Sets configuration and settings for the UI and API.
#
# 4. Outputs:
# Environment: The name of the environment, e.g. development or production.
# Timezone: The timezone, e.g. Europe/London.
#
# Note
# ****
# Azure CLI will merely ignore the new resource creation if already exist with the same name.
#

name: Infrastructure üî®
run-name: EXIP base infrastructure build from ${{ github.repository }}

on:
  push:
    branches:
      - infrastructure

    paths: [.github/workflows/infrastructure.yml]

env:
  PRODUCT: exip
  ENVIRONMENT: infrastructure
  TIMEZONE: "Europe/London"
  # Deployment environment target i.e., `development`, `staging`, `production`
  TARGET: ${{ vars.ENVIRONMENT }}

jobs:
  # 1. Setup infrastructure variables
  setup:
    name: Setup üîß
    runs-on: [self-hosted, EXIP, infrastructure]
    outputs:
      environment: ${{ env.ENVIRONMENT }}
      timezone: ${{ env.TIMEZONE }}
    steps:
      - name: Environment üß™
        run: echo "Environment set to ${{ env.ENVIRONMENT }}"

      - name: Timezone üåê
        run: echo "Timezone set to ${{ env.TIMEZONE }}"

  # 2. Base infrastructure creation
  base:
    name: Base üß±
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    outputs:
      environment: ${{ env.ENVIRONMENT }}
    runs-on: [self-hosted, EXIP, infrastructure]
    steps:
      - name: Pre-production üí´
        if: contains('["development", "staging"]', env.TARGET)
        run: echo "TYPE=Preproduction" >> $GITHUB_ENV

      - name: Production üí´
        if: ${{ 'prod' == env.TARGET }}
        run: echo "TYPE=Production" >> $GITHUB_ENV

      - name: Tags üè∑Ô∏è
        run: echo TAGS='Environment=${{ env.TYPE }}' \
          'Product=${{ env.PRODUCT }}' \
          'Team=development' >> $GITHUB_ENV

      - name: Login üîê
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure defaults ‚ú®
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            # Basic
            az configure --defaults location=${{ vars.REGION }}
            az configure --defaults group=rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }}

      - name: Resource group üèóÔ∏è
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az group create \
            --name rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --tags ${{ env.TAGS }}

      - name: Plan üìù
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az appservice plan create \
            --name appservice-plan-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --is-linux \
            --sku ${{ vars.APP_SERVICE_PLAN }} \
            --tags ${{ env.TAGS }}

      - name: Log analytics workspace üìù
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az monitor log-analytics workspace create \
            --name log-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --ingestion-access Disabled \
            --query-access Disabled \
            --quota 0.05 \
            --retention-time ${{ vars.LOG_RETENTION_DAY }} \
            --sku ${{ vars.LOG_ANALYTICS_PLAN }} \
            --tags ${{ env.TAGS }}

      - name: Container registry üì¶Ô∏è
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az acr create \
            --name cr${{ env.PRODUCT }}${{ env.TARGET }}${{ vars.VERSION }} \
            --sku Standard \
            --admin-enabled true \
            --workspace log-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --tags ${{ env.TAGS }}

      - name: Virtual network üßµ
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az network vnet create \
            --name vnet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --address-prefix ${{ secrets.VNET_ADDRESS_PREFIX }} \
            --subnet-name snet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --subnet-prefixes ${{ secrets.VNET_SUBNET_PREFIX }} \
            --tags ${{ env.TAGS }}

      - name: VNET Peer - AMI üîÄ
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            # Azure Managed Instance (AMI) SQL DB VNET peering

            # Local VNET peer
            az network vnet peering create \
            --name vnet-peer-ami-${{ env.TARGET }}-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --vnet-name vnet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --remote-vnet $(az network vnet show --subscription ${{ secrets.REMOTE_VNET_SUBSCRIPTION_AMI }} --resource-group ${{ secrets.REMOTE_VNET_RESOURCE_GROUP_AMI }} --name ${{ secrets.REMOTE_VNET_NAME_AMI }} --query 'id' -o tsv) \
            --allow-vnet-access 1

            # Remote VNET peer
            az network vnet peering create \
            --name vnet-peer-ami-${{ env.TARGET }}-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --vnet-name  ${{ secrets.REMOTE_VNET_NAME_AMI }} \
            --remote-vnet $(az network vnet show --name vnet-${{ env.PRODUCT }}-${{ vars.VERSION }} --query 'id' -o tsv) \
            --allow-vnet-access 1 \
            --subscription ${{ secrets.REMOTE_VNET_SUBSCRIPTION_AMI }} \
            --resource-group ${{ secrets.REMOTE_VNET_RESOURCE_GROUP_AMI }}

            # Fetch peering state
            echo "Peering state: $(az network vnet peering show \
            --vnet-name vnet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --name vnet-peer-ami-${{ env.TARGET }}-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --query peeringState)"

      - name: Web app - UI üåê
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp create \
            --name app-${{ env.PRODUCT }}-ui-${{ env.TARGET }}-${{ vars.VERSION }} \
            --plan appservice-plan-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --deployment-container-image-name cr${{ env.PRODUCT }}${{ env.TARGET }}${{ vars.VERSION }}.azurecr.io/ui:${{ env.TARGET }} \
            --vnet vnet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --subnet snet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --tags ${{ env.TAGS }}

      - name: Web app - API üåê
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp create \
            --name app-${{ env.PRODUCT }}-api-${{ env.TARGET }}-${{ vars.VERSION }} \
            --plan appservice-plan-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }} \
            --deployment-container-image-name cr${{ env.PRODUCT }}${{ env.TARGET }}${{ vars.VERSION }}.azurecr.io/api:${{ env.TARGET }} \
            --vnet vnet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --subnet snet-${{ env.PRODUCT }}-${{ vars.VERSION }} \
            --tags ${{ env.TAGS }}

  # 3. WebApp configuration
  webapp:
    name: Web App üîß
    needs: base
    environment: ${{ needs.base.outputs.environment }}
    runs-on: [self-hosted, EXIP, infrastructure]
    steps:
      - name: Pre-production üí´
        if: contains('["dev", "staging"]', env.TARGET)
        run: echo "TYPE=Preproduction" >> $GITHUB_ENV

      - name: Production üí´
        if: ${{ 'prod' == env.TARGET }}
        run: echo "TYPE=Production" >> $GITHUB_ENV

      - name: Login üîê
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure defaults ‚ú®
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            # Basic
            az configure --defaults location=${{ vars.REGION }}
            az configure --defaults group=rg-${{ env.PRODUCT }}-${{ env.TARGET }}-${{ vars.VERSION }}

      - name: CD üîÄ
        run: |
          # Configure continuous deployment via containers

          # UI
          az webapp deployment container config \
          --name app-${{ env.PRODUCT }}-ui-${{ env.TARGET }}-${{ vars.VERSION }} \
          --enable-cd true

          # API
          az webapp deployment container config \
          --name app-${{ env.PRODUCT }}-api-${{ env.TARGET }}-${{ vars.VERSION }} \
          --enable-cd true

      - name: Configuration üî®
        run: |
          # Set a web app's configuration

          # UI
          az webapp config set \
          --name app-${{ env.PRODUCT }}-ui-${{ env.TARGET }}-${{ vars.VERSION }} \
          --always-on true \
          --ftps-state Disabled \
          --http20-enabled true \
          --min-tls-version '${{ vars.TLS_VERSION }}'

          # API
          az webapp config set \
          --name app-${{ env.PRODUCT }}-api-${{ env.TARGET }}-${{ vars.VERSION }} \
          --always-on true \
          --ftps-state Disabled \
          --http20-enabled true \
          --min-tls-version '${{ vars.TLS_VERSION }}'

      - name: Setting üß±
        run: |
          # Set a web app's settings

          # UI
          az webapp config appsettings set \
          --name app-${{ env.PRODUCT }}-ui-${{ env.TARGET }}-${{ vars.VERSION }} \
          --settings \
          #TODO: Set to `1` once SSL is enabled
          HTTPS=0 \
          TZ=Europe/London \
          WEBSITE_DNS_SERVER='${{ vars.WEBSITE_DNS_SERVER }}' \
          WEBSITE_VNET_ROUTE_ALL=1 \
          SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
          BASIC_AUTH_KEY='${{ secrets.BASIC_AUTH_KEY }}' \
          BASIC_AUTH_SECRET='${{ secrets.BASIC_AUTH_SECRET }}' \
          GOOGLE_ANALYTICS_ID='${{ secrets.GOOGLE_ANALYTICS_ID }}' \
          GOV_NOTIFY_API_KEY='${{ secrets.GOV_NOTIFY_API_KEY }}' \
          COMPANIES_HOUSE_API_URL='${{ secrets.COMPANIES_HOUSE_API_URL }}' \
          COMPANIES_HOUSE_API_KEY='${{ secrets.COMPANIES_HOUSE_API_KEY }}' \
          API_URL='https://$(az webapp show --name app-${{ env.PRODUCT }}-api-${{ env.TARGET }}-${{ vars.VERSION }} --query defaultHostName -o tsv)/api/graphql' \
          APIM_MDM_URL='${{ secrets.APIM_MDM_URL }}' \
          APIM_MDM_KEY='${{ secrets.APIM_MDM_KEY }}' \
          APIM_MDM_VALUE='${{ secrets.APIM_MDM_VALUE }}'

          # API
          az webapp config appsettings set \
          --name app-${{ env.PRODUCT }}-api-${{ env.TARGET }}-${{ vars.VERSION }} \
          --settings \
          TZ=Europe/London \
          WEBSITE_DNS_SERVER=${{ vars.WEBSITE_DNS_SERVER }} \
          WEBSITE_VNET_ROUTE_ALL=1 \
          DATABASE_URL='${{ secrets.DATABASE_URL }}' \
          MYSQL_DATABASE='${{ secrets.MYSQL_DATABASE }}' \
          MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}' \
          APIM_MDM_URL='${{ secrets.APIM_MDM_URL }}' \
          APIM_MDM_KEY='${{ secrets.APIM_MDM_KEY }}' \
          APIM_MDM_VALUE='${{ secrets.APIM_MDM_VALUE }}' \
          SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
          GOV_NOTIFY_API_KEY='${{ secrets.GOV_NOTIFY_API_KEY }}' \
          COMPANIES_HOUSE_API_URL='${{ secrets.COMPANIES_HOUSE_API_URL }}' \
          COMPANIES_HOUSE_API_KEY='${{ secrets.COMPANIES_HOUSE_API_KEY }}' \
          JWT_SIGNING_KEY='${{ secrets.JWT_SIGNING_KEY }}' \
          JWT_VALIDATING_KEY='${{ secrets.JWT_VALIDATING_KEY }}' \
          UNDERWRITING_TEAM_EMAIL='${{ secrets.UNDERWRITING_TEAM_EMAIL }}' \
          FEEDBACK_EMAIL_RECIPIENT='${{ secrets.FEEDBACK_EMAIL_RECIPIENT }}'

      - name: Log üìÑ
        run: |
          # Configure logging for a web app.

          # UI
          az webapp log config \
          --name app-${{ env.PRODUCT }}-ui-${{ env.TARGET }}-${{ vars.VERSION }} \
          --detailed-error-messages true \
          --failed-request-tracing true \
          --level ${{ vars.WEBAPP_LOG_LEVEL }} \
          --application-logging ${{ vars.WEBAPP_LOG_DESTINATION }} \
          --docker-container-logging ${{ vars.WEBAPP_LOG_DESTINATION }} \
          --web-server-logging ${{ vars.WEBAPP_LOG_DESTINATION }}

          # API
          az webapp log config \
          --name app-${{ env.PRODUCT }}-api-${{ env.TARGET }}-${{ vars.VERSION }} \
          --detailed-error-messages true \
          --failed-request-tracing true \
          --level ${{ vars.WEBAPP_LOG_LEVEL }} \
          --application-logging ${{ vars.WEBAPP_LOG_DESTINATION }} \
          --docker-container-logging ${{ vars.WEBAPP_LOG_DESTINATION }} \
          --web-server-logging ${{ vars.WEBAPP_LOG_DESTINATION }}
