# This GHA is responsible for EXIP deployment.
# Deployment is initiated using `az cli` bash script.
#
# Standard Azure naming convention has been followed:
# https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming
#
#
# Following Azure services are consumed:
# 1. Azure resource group - https://learn.microsoft.com/en-us/cli/azure/group?view=azure-cli-latest#az-group-create
# 2. Azure container registry - https://learn.microsoft.com/en-us/cli/azure/acr?view=azure-cli-latest#az-acr-create
# 3. Azure WebApp - https://learn.microsoft.com/en-us/azure/app-service/overview
#
#
# Execution
# *********
# GHA is only invoked when following conditions are satisfied:
# 1. Push to the `dev`, `staging` and `production` branches only.
# 2. Any modifications to atleast one of the `paths` targets.

name: Deployment üöÄ
run-name: EXIP deployment for ${{ github.repository }}

on:
  push:
    branches:
      - dev
      - staging
      - production
      #TODO: Remove pre-merge
      - feat/deployment

    paths:
      - 'src/**'
      - 'database/**'
      - '.github/workflows/deployment.yml'

env:
  PRODUCT: apim
  ENVIRONMENT: ${{ github.ref_name }}
  TIMEZONE: 'Europe/London'
  # Base artifact
  FROM: latest

jobs:
  # 1. Setup deployment variables
  setup:
    name: Setup üîß
    runs-on: [self-hosted, APIM, deployment]
    outputs:
      product: ${{ env.PRODUCT }}
      environment: ${{ env.ENVIRONMENT }}
      timezone: ${{ env.TIMEZONE }}
    steps:
      - name: Environment üß™
        run: echo "Environment set to ${{ env.ENVIRONMENT }}"

      - name: Timezone üåê
        run: echo "Timezone set to ${{ env.TIMEZONE }}"

  # 2. DB - Initialisation
  database:
    name: Database üì¶Ô∏è
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    env:
      NAME: mysql
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    runs-on: [self-hosted, EXIP, deployment]

    steps:
      - name: Repository üóÉÔ∏è
        uses: actions/checkout@v3

      - name: Azure üîê
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Defaults ‚ú®
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            # Basic
            az configure --defaults location=${{ vars.REGION }}
            az configure --defaults group=rg-${{ env.PRODUCT }}-${{ github.ref_name }}-${{ vars.VERSION }}

    #TODO: EMS-1176: MS SQL DB setup

  # 3. API - Deployment
  api:
    name: API üì¶Ô∏è
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    env:
      NAME: api
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    runs-on: [self-hosted, EXIP, deployment]
    steps:
      - name: Repository üóÉÔ∏è
        uses: actions/checkout@v3

      - name: Azure üîê
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Defaults ‚ú®
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            # Basic
            az configure --defaults location=${{ vars.REGION }}
            az configure --defaults group=rg-${{ env.PRODUCT }}-${{ github.ref_name }}-${{ vars.VERSION }}

      - name: CLI üìù
        run: |
          echo ACR=$(az acr show -n $(az resource list --resource-type 'Microsoft.ContainerRegistry/registries' --query '[0].name' -o tsv) --query loginServer -o tsv) >> $GITHUB_ENV
          echo ACR_USER=$(az acr show -n $(az resource list --resource-type 'Microsoft.ContainerRegistry/registries' --query '[0].name' -o tsv) --query name -o tsv) >> $GITHUB_ENV
          echo WEBAPP=$(az acr show -n $(az resource list --resource-type 'Microsoft.ContainerRegistry/webapp' --query '[0].name' -o tsv) --query name -o tsv) >> $GITHUB_ENV

      - name: ACR üîê
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR }}
          username: ${{ env.ACR_USER }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Artifacts üóÉÔ∏è
        run: |
          docker build . \
          -t ${{ env.ACR }}/${{ env.NAME }}:${{ github.sha }} \
          -t ${{ env.ACR }}/${{ env.NAME }}:${{ env.FROM }}
          docker push ${{ env.ACR }}/${{ env.NAME }}:${{ github.sha }}
          docker push ${{ env.ACR }}/${{ env.NAME }}:${{ env.FROM }}

      - name: Slot üîÄ
        uses: azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp deployment slot create --name ${{ env.WEBAPP }} --slot ${{ github.sha }} --configuration-source ${{ env.WEBAPP }}
            az webapp deployment slot swap --name ${{ env.WEBAPP }} --slot ${{ github.sha }} --action swap
            az webapp deployment slot delete --name ${{ env.WEBAPP }} --slot ${{ github.sha }}

      - name: Reboot ‚ôªÔ∏è
        uses: azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp restart --name ${{ env.WEBAPP }}
